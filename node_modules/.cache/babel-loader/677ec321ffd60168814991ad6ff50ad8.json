{"ast":null,"code":"import { debounce } from \"debounce\";\nimport { random, map } from \"./utils\";\nexport default class Orb {\n  constructor(xPosInWidthPct, yPosInHeightPct, maxDistPct, fillColor) {\n    this.xPosInWidthPct = xPosInWidthPct;\n    this.yPosInHeightPct = yPosInHeightPct;\n    this.maxDistPct = maxDistPct;\n    this.bounds = this.setBounds();\n    this.x = random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.radius = random(window.innerHeight / 6, window.innerHeight / 2);\n    this.xOff = random(0, 1000);\n    this.yOff = random(0, 1000);\n    this.inc = 0.002;\n    this.fillColor = fillColor;\n    window.addEventListener(\"resize\", debounce(() => {\n      this.bounds = this.setBounds();\n    }, 250));\n  }\n\n  setBounds() {\n    const maxDistX = window.innerWidth * this.maxDistPct;\n    const maxDistY = window.innerHeight * this.maxDistPct;\n    return {\n      x: {\n        min: this.xPosInWidthPct * window.innerWidth - maxDistX,\n        max: this.xPosInWidthPct * window.innerWidth + maxDistX\n      },\n      y: {\n        min: this.yPosInHeightPct * window.innerHeight - maxDistY,\n        max: this.yPosInHeightPct * window.innerHeight + maxDistY\n      }\n    };\n  }\n\n  move(sketchInstance) {\n    const xNoise = sketchInstance.noise(this.xOff, this.xOff);\n    const yNoise = sketchInstance.noise(this.yOff, this.yOff);\n    this.x = sketchInstance.map(xNoise, 0, 1, this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = sketchInstance.map(yNoise, 0, 1, this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n\n  render(sketchInstance) {\n    sketchInstance.fill(this.fillColor, 0.5);\n    sketchInstance.ellipse(this.x, this.y, this.radius, this.radius);\n  }\n\n}","map":{"version":3,"sources":["/home/maxime/personal_repos/sweet-portfolio/src/helpers/Orb.js"],"names":["debounce","random","map","Orb","constructor","xPosInWidthPct","yPosInHeightPct","maxDistPct","fillColor","bounds","setBounds","x","min","max","y","radius","window","innerHeight","xOff","yOff","inc","addEventListener","maxDistX","innerWidth","maxDistY","move","sketchInstance","xNoise","noise","yNoise","render","fill","ellipse"],"mappings":"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","sourcesContent":["import { debounce } from \"debounce\";\nimport { random, map } from \"./utils\";\n\nexport default class Orb {\n  constructor(xPosInWidthPct, yPosInHeightPct, maxDistPct, fillColor) {\n    this.xPosInWidthPct = xPosInWidthPct;\n    this.yPosInHeightPct = yPosInHeightPct;\n    this.maxDistPct = maxDistPct;\n\n    this.bounds = this.setBounds();\n    this.x = random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n\n    this.radius = random(window.innerHeight / 6, window.innerHeight / 2);\n\n    this.xOff = random(0, 1000);\n    this.yOff = random(0, 1000);\n    this.inc = 0.002;\n\n    this.fillColor = fillColor;\n    window.addEventListener(\n      \"resize\",\n      debounce(() => {\n        this.bounds = this.setBounds();\n      }, 250)\n    );\n  }\n\n  setBounds() {\n    const maxDistX = window.innerWidth * this.maxDistPct;\n    const maxDistY = window.innerHeight * this.maxDistPct;\n\n    return {\n      x: {\n        min: this.xPosInWidthPct * window.innerWidth - maxDistX,\n        max: this.xPosInWidthPct * window.innerWidth + maxDistX,\n      },\n      y: {\n        min: this.yPosInHeightPct * window.innerHeight - maxDistY,\n        max: this.yPosInHeightPct * window.innerHeight + maxDistY,\n      },\n    };\n  }\n\n  move(sketchInstance) {\n    const xNoise = sketchInstance.noise(this.xOff, this.xOff);\n    const yNoise = sketchInstance.noise(this.yOff, this.yOff);\n\n    this.x = sketchInstance.map(\n      xNoise,\n      0,\n      1,\n      this.bounds[\"x\"].min,\n      this.bounds[\"x\"].max\n    );\n    this.y = sketchInstance.map(\n      yNoise,\n      0,\n      1,\n      this.bounds[\"y\"].min,\n      this.bounds[\"y\"].max\n    );\n\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n\n  render(sketchInstance) {\n    sketchInstance.fill(this.fillColor, 0.5);\n    sketchInstance.ellipse(this.x, this.y, this.radius, this.radius);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}