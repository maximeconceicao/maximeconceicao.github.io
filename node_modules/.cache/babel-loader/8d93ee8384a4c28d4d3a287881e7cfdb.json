{"ast":null,"code":"import { debounce } from \"debounce\";\nimport { random, map } from \"./utils\";\nexport default class Orb {\n  constructor(originX, originY, fillColor) {\n    this.bounds = this.setBounds(originX, originY);\n    this.x = utils.random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = utils.random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.scale = 1;\n    this.radius = utils.random(window.innerHeight / 6, window.innerHeight / 3);\n    this.xOff = utils.random(0, 1000);\n    this.yOff = utils.random(0, 1000);\n    this.inc = 0.002;\n    this.fillColor = fillColor;\n    window.addEventListener(\"resize\", debounce(() => {\n      this.bounds = this.setBounds();\n    }, 250));\n  }\n\n  setBounds(originX, originY) {\n    const maxDist = window.innerWidth < 1000 ? window.innerWidth / 3 : window.innerWidth / 5;\n    return {\n      x: {\n        min: originX - maxDist,\n        max: originX + maxDist\n      },\n      y: {\n        min: originY - maxDist,\n        max: originY + maxDist\n      }\n    };\n  }\n\n  move(sketchInstance) {\n    const xNoise = sketchInstance.noise(this.xOff, this.xOff);\n    const yNoise = sketchInstance.noise(this.yOff, this.yOff);\n    const scaleNoise = sketchInstance.noise(this.xOff, this.yOff);\n    this.x = utils.map(xNoise, -1, 1, this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = utils.map(yNoise, -1, 1, this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.scale = utils.map(scaleNoise, -1, 1, 0.5, 1);\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n\n  render(sketchInstance) {\n    sketchInstance.fill(this.fillColor);\n    sketchInstance.ellipse(this.x, this.y, this.radius, this.radius);\n  }\n\n}","map":{"version":3,"sources":["/home/maxime/personal_repos/sweet-portfolio/src/helpers/Orb.js"],"names":["debounce","random","map","Orb","constructor","originX","originY","fillColor","bounds","setBounds","x","utils","min","max","y","scale","radius","window","innerHeight","xOff","yOff","inc","addEventListener","maxDist","innerWidth","move","sketchInstance","xNoise","noise","yNoise","scaleNoise","render","fill","ellipse"],"mappings":"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","sourcesContent":["import { debounce } from \"debounce\";\nimport { random, map } from \"./utils\";\n\nexport default class Orb {\n  constructor(originX, originY, fillColor) {\n    this.bounds = this.setBounds(originX, originY);\n    this.x = utils.random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = utils.random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n\n    this.scale = 1;\n\n    this.radius = utils.random(window.innerHeight / 6, window.innerHeight / 3);\n\n    this.xOff = utils.random(0, 1000);\n    this.yOff = utils.random(0, 1000);\n    this.inc = 0.002;\n\n    this.fillColor = fillColor;\n    window.addEventListener(\n      \"resize\",\n      debounce(() => {\n        this.bounds = this.setBounds();\n      }, 250)\n    );\n  }\n\n  setBounds(originX, originY) {\n    const maxDist =\n      window.innerWidth < 1000 ? window.innerWidth / 3 : window.innerWidth / 5;\n\n    return {\n      x: {\n        min: originX - maxDist,\n        max: originX + maxDist,\n      },\n      y: {\n        min: originY - maxDist,\n        max: originY + maxDist,\n      },\n    };\n  }\n\n  move(sketchInstance) {\n    const xNoise = sketchInstance.noise(this.xOff, this.xOff);\n    const yNoise = sketchInstance.noise(this.yOff, this.yOff);\n    const scaleNoise = sketchInstance.noise(this.xOff, this.yOff);\n\n    this.x = utils.map(\n      xNoise,\n      -1,\n      1,\n      this.bounds[\"x\"].min,\n      this.bounds[\"x\"].max\n    );\n    this.y = utils.map(\n      yNoise,\n      -1,\n      1,\n      this.bounds[\"y\"].min,\n      this.bounds[\"y\"].max\n    );\n    this.scale = utils.map(scaleNoise, -1, 1, 0.5, 1);\n\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n\n  render(sketchInstance) {\n    sketchInstance.fill(this.fillColor);\n    sketchInstance.ellipse(this.x, this.y, this.radius, this.radius);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}