{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"game-cells\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_sweet_game_cell = _resolveComponent(\"sweet-game-cell\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.playerSequence, (shape, index) => {\n    return _openBlock(), _createBlock(_component_sweet_game_cell, {\n      key: index,\n      shape: shape\n    }, null, 8\n    /* PROPS */\n    , [\"shape\"]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;AACOA,OAAK,EAAC;;;;;uBAAXC,oBAMM,KANN,cAMM,oBALJA,oBAIEC,SAJF,EAIE,IAJF,EAIEC,YAHyBC,qBAGzB,EAHuC,CAA/BC,KAA+B,EAAxBC,KAAwB,KAAnB;yBADtBC,aAIEC,0BAJF,EAIE;AAFCC,SAAG,EAAEH,KAEN;AADCD,WAAK,EAAEA;AACR,KAJF;;AAAA;GAIE,CAJF;;AAAA,GAKI,EANN","names":["class","_createElementBlock","_Fragment","_renderList","$setup","shape","index","_createBlock","_component_sweet_game_cell","key"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/components/SweetGameCells.vue"],"sourcesContent":["<template>\n  <div class=\"game-cells\">\n    <sweet-game-cell\n      v-for=\"(shape, index) in playerSequence\"\n      :key=\"index\"\n      :shape=\"shape\"\n    />\n  </div>\n</template>\n\n<script>\nimport { onMounted, onUpdated, ref } from \"vue\";\nimport SweetGameCell from \"@/components/SweetGameCell.vue\";\n\nexport default {\n  name: \"SweetGameCells\",\n  components: { SweetGameCell },\n  props: [\"sequenceToFind\"],\n  setup(props) {\n    let playerSequence = ref(null);\n\n    function resetPlayerSequence() {\n      playerSequence.value = Array.apply(\n        null,\n        Array(props.sequenceToFind.length)\n      ).map(() => {\n        return {};\n      });\n    }\n\n    onMounted(() => {\n      console.log(\"GAME CELLS : \", playerSequence, props.sequenceToFind.length);\n      for (const cell in playerSequence) {\n        console.log(\"hello\");\n      }\n    });\n\n    onUpdated(() => {\n      console.log(\"GAME CELLS : \", playerSequence, props.sequenceToFind.length);\n      resetPlayerSequence();\n\n      for (const cell in playerSequence) {\n        console.log(\"hello\");\n      }\n    });\n\n    return { playerSequence };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}