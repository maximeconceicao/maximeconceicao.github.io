{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"sticky-header\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"material-icons\"\n}, \"arrow_back\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  id: \"main-game\"\n};\nconst _hoisted_4 = {\n  class: \"game__header\"\n};\nconst _hoisted_5 = {\n  class: \"game__header__item\"\n};\nconst _hoisted_6 = {\n  class: \"game-score\"\n};\nconst _hoisted_7 = {\n  class: \"game__header__item\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  const _component_sweet_game_timer = _resolveComponent(\"sweet-game-timer\");\n  const _component_sweet_game_sequence = _resolveComponent(\"sweet-game-sequence\");\n  const _component_sweet_game_cells = _resolveComponent(\"sweet-game-cells\");\n  const _component_sweet_game_buttons = _resolveComponent(\"sweet-game-buttons\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"header\", null, [_createVNode(_component_router_link, {\n    to: {\n      name: 'home'\n    }\n  }, {\n    default: _withCtx(() => [_hoisted_2]),\n    _: 1 /* STABLE */\n  })])]), _createElementVNode(\"main\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"p\", _hoisted_6, _toDisplayString(_ctx.score), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_sweet_game_timer, {\n    startSeconds: 10\n  })])]), _createVNode(_component_sweet_game_sequence, {\n    sequenceToFind: _ctx.sequenceToFind\n  }, null, 8 /* PROPS */, [\"sequenceToFind\"]), _ctx.playerSequence?.length ? (_openBlock(), _createBlock(_component_sweet_game_cells, {\n    key: 0,\n    playerSequence: _ctx.playerSequence\n  }, null, 8 /* PROPS */, [\"playerSequence\"])) : _createCommentVNode(\"v-if\", true), _createVNode(_component_sweet_game_buttons, {\n    onDrawShape: _ctx.onDrawShape,\n    onReverse: _ctx.onReverse,\n    onClear: _ctx.onClear\n  }, null, 8 /* PROPS */, [\"onDrawShape\", \"onReverse\", \"onClear\"])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","id","_createElementBlock","_hoisted_1","_createVNode","_component_router_link","to","name","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_toDisplayString","_ctx","score","_hoisted_7","_component_sweet_game_timer","startSeconds","_component_sweet_game_sequence","sequenceToFind","playerSequence","length","_createBlock","_component_sweet_game_cells","_component_sweet_game_buttons","onDrawShape","onReverse","onClear"],"sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/views/GameView.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"sticky-header\">\n      <header>\n        <router-link :to=\"{ name: 'home' }\"\n          ><span class=\"material-icons\">arrow_back</span></router-link\n        >\n      </header>\n    </div>\n    <main id=\"main-game\">\n      <div class=\"game__header\">\n        <div class=\"game__header__item\">\n          <p class=\"game-score\">{{ score }}</p>\n        </div>\n        <div class=\"game__header__item\">\n          <sweet-game-timer :startSeconds=\"10\" />\n        </div>\n      </div>\n      <sweet-game-sequence :sequenceToFind=\"sequenceToFind\" />\n      <sweet-game-cells\n        v-if=\"playerSequence?.length\"\n        :playerSequence=\"playerSequence\"\n      />\n      <sweet-game-buttons\n        @drawShape=\"onDrawShape\"\n        @reverse=\"onReverse\"\n        @clear=\"onClear\"\n      />\n    </main>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref, onMounted } from \"vue\";\nimport SweetGameSequence from \"@/components/SweetGame/SweetGameSequence.vue\";\nimport SweetGameCells from \"@/components/SweetGame/SweetGameCells.vue\";\nimport SweetGameButtons from \"@/components/SweetGame/SweetGameButtons.vue\";\nimport SweetGameTimer from \"@/components/SweetGame/SweetGameTimer.vue\";\n\nimport { SHAPES, START_SEQUENCE_LENGTH } from \"@/helpers/game.constants\";\nimport { random } from \"@/helpers/utils.js\";\n\nexport default defineComponent({\n  name: \"GameView\",\n  components: {\n    SweetGameSequence,\n    SweetGameCells,\n    SweetGameButtons,\n    SweetGameTimer,\n  },\n  setup() {\n    let sequenceLength = START_SEQUENCE_LENGTH;\n    let sequenceToFind = ref([]);\n    let playerSequence = ref([]);\n    let score = ref(0);\n\n    function resetGame() {\n      sequenceLength = START_SEQUENCE_LENGTH;\n      resetSequences();\n    }\n\n    function resetSequences() {\n      sequenceToFind.value = generateStartingSequence(sequenceLength);\n      playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n    }\n\n    function generateStartingSequence(sequenceLength) {\n      const generatedSequence = [];\n      for (let i = 0; i < sequenceLength; i++) {\n        let indexOfShape = Math.floor(random(0, Object.keys(SHAPES).length));\n        generatedSequence.push(Object.values(SHAPES)[indexOfShape]);\n      }\n      return generatedSequence;\n    }\n\n    function resetPlayerSequence(sequenceLength) {\n      return Array.apply(null, Array(sequenceLength)).map(() => {\n        return null;\n      });\n    }\n\n    function onDrawShape(shape) {\n      const index = playerSequence.value.findIndex((shape) => shape === null);\n\n      if (index > -1) {\n        playerSequence.value[index] = shape;\n      } else {\n        playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n      }\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    function onClear() {\n      playerSequence.value = resetPlayerSequence(sequenceLength);\n    }\n\n    function validateSequence() {\n      if (\n        JSON.stringify(playerSequence.value) ===\n        JSON.stringify(sequenceToFind.value)\n      ) {\n        score.value += 1;\n        sequenceLength += 1;\n        resetSequences();\n      }\n    }\n\n    function onReverse() {\n      let playerSequenceCopy = [...playerSequence.value];\n      playerSequenceCopy.forEach((shape, index) => {\n        switch (shape) {\n          case SHAPES.STAR:\n            playerSequence.value[index] = SHAPES.TRIANGLE;\n            break;\n          case SHAPES.SQUARE:\n            playerSequence.value[index] = SHAPES.CIRCLE;\n            break;\n          case SHAPES.TRIANGLE:\n            playerSequence.value[index] = SHAPES.STAR;\n            break;\n          case SHAPES.CIRCLE:\n            playerSequence.value[index] = SHAPES.SQUARE;\n            break;\n        }\n      });\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    onMounted(() => {\n      resetGame();\n      console.log(\"PLAYER SEQUENCE \", playerSequence.value.at(-1));\n    });\n    return {\n      sequenceToFind,\n      playerSequence,\n      score,\n      onDrawShape,\n      onReverse,\n      onClear,\n    };\n  },\n});\n</script>\n"],"mappings":";;EAESA,KAAK,EAAC;AAAe;gCAGnBC,mBAAA,CAA8C;EAAxCD,KAAK,EAAC;AAAgB,GAAC,YAAU;;EAIxCE,EAAE,EAAC;AAAW;;EACbF,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAoB;;EAC1BA,KAAK,EAAC;AAAY;;EAElBA,KAAK,EAAC;AAAoB;;;;;;;uBAbrCG,mBAAA,CA4BM,cA3BJF,mBAAA,CAMM,OANNG,UAMM,GALJH,mBAAA,CAIS,iBAHPI,YAAA,CAECC,sBAAA;IAFaC,EAAE,EAAE;MAAAC,IAAA;IAAA;EAAgB;sBAC/B,MAA8C,CAA9CC,UAA8C,C;;UAIrDR,mBAAA,CAmBO,QAnBPS,UAmBO,GAlBLT,mBAAA,CAOM,OAPNU,UAOM,GANJV,mBAAA,CAEM,OAFNW,UAEM,GADJX,mBAAA,CAAqC,KAArCY,UAAqC,EAAAC,gBAAA,CAAZC,IAAA,CAAAC,KAAK,iB,GAEhCf,mBAAA,CAEM,OAFNgB,UAEM,GADJZ,YAAA,CAAuCa,2BAAA;IAApBC,YAAY,EAAE;EAAE,G,KAGvCd,YAAA,CAAwDe,8BAAA;IAAlCC,cAAc,EAAEN,IAAA,CAAAM;EAAc,6CAE5CN,IAAA,CAAAO,cAAc,EAAEC,MAAM,I,cAD9BC,YAAA,CAGEC,2BAAA;;IADCH,cAAc,EAAEP,IAAA,CAAAO;oFAEnBjB,YAAA,CAIEqB,6BAAA;IAHCC,WAAS,EAAEZ,IAAA,CAAAY,WAAW;IACtBC,SAAO,EAAEb,IAAA,CAAAa,SAAS;IAClBC,OAAK,EAAEd,IAAA,CAAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}