{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"orb-sketch\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"test\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Canvas \"), _hoisted_1, _hoisted_2], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCAGEA,oBAA2B,KAA3B,EAA2B;AAAtBC,IAAE,EAAC;AAAmB,CAA3B,EAAoB,IAApB,EAAoB;AAAA;AAApB;;gCACAD,oBAAwB,KAAxB,EAAwB;AAAnBE,OAAK,EAAC;AAAa,CAAxB,EAAiB,IAAjB,EAAiB;AAAA;AAAjB;;;6DAHAC,iCAEAC,YACAC","names":["_createElementVNode","id","class","_createCommentVNode","_hoisted_1","_hoisted_2"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/components/SweetBackground.vue"],"sourcesContent":["<template>\n  <!-- Canvas -->\n\n  <div id=\"orb-sketch\"></div>\n  <div class=\"test\"></div>\n</template>\n\n<script>\nimport p5 from \"p5\";\nimport utils from \"../helpers/utils\";\nimport { debounce } from \"debounce\";\nimport { onMounted } from \"@vue/runtime-core\";\n\nexport default {\n  name: \"SweetBackground\",\n  setup() {\n    onMounted(() => {\n      const sketch = (s) => {\n        let w = window.innerWidth;\n        let h = window.innerHeight;\n\n        let increment = 0.001;\n        let xoff = 0.0;\n        let yoff = 10.0;\n\n        s.setup = () => {\n          s.createCanvas(w, h);\n        };\n\n        s.draw = () => {\n          s.background(200);\n          s.fill(255);\n\n          const orbs = [];\n\n          xoff += increment;\n          yoff += increment;\n          const x = s.noise(xoff) * w;\n          const y = s.noise(yoff) * h;\n\n          s.ellipse(x, y, 200, 200);\n        };\n\n        window.onresize = function () {\n          // assigns new values for width and height variables\n          w = window.innerWidth;\n          h = window.innerHeight;\n          s.resizeCanvas(w, h);\n        };\n\n        class Orb {\n          constructor(originX, originY, fillColor) {\n            this.bounds = this.setBounds(originX, originY);\n            this.x = utils.random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n            this.y = utils.random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n\n            this.scale = 1;\n\n            this.radius = utils.random(\n              window.innerHeight / 6,\n              window.innerHeight / 3\n            );\n\n            this.xOff = utils.random(0, 1000);\n            this.yOff = utils.random(0, 1000);\n            this.inc = 0.002;\n\n            this.fillColor = fillColor;\n            window.addEventListener(\n              \"resize\",\n              debounce(() => {\n                this.bounds = this.setBounds();\n              }, 250)\n            );\n          }\n\n          setBounds(originX, originY) {\n            const maxDist =\n              window.innerWidth < 1000\n                ? window.innerWidth / 3\n                : window.innerWidth / 5;\n\n            return {\n              x: {\n                min: originX - maxDist,\n                max: originX + maxDist,\n              },\n              y: {\n                min: originY - maxDist,\n                max: originY + maxDist,\n              },\n            };\n          }\n\n          move() {\n            const xNoise = s.noise(this.xOff, this.xOff);\n            const yNoise = s.noise(this.yOff, this.yOff);\n            const scaleNoise = s.noise(this.xOff, this.yOff);\n\n            this.x = utils.map(\n              xNoise,\n              -1,\n              1,\n              this.bounds[\"x\"].min,\n              this.bounds[\"x\"].max\n            );\n            this.y = utils.map(\n              yNoise,\n              -1,\n              1,\n              this.bounds[\"y\"].min,\n              this.bounds[\"y\"].max\n            );\n            this.scale = utils.map(scaleNoise, -1, 1, 0.5, 1);\n\n            this.xOff += this.inc;\n            this.yOff += this.inc;\n          }\n\n          render() {\n            s.fill(this.fillColor);\n            s.ellipse(this.x, this.y, this.radius, this.radius);\n          }\n        }\n      };\n\n      const sketchInstance = new p5(sketch, \"orb-sketch\");\n\n      /* const app = new PIXI.Application({\n        view: document.querySelector(\".orb-canvas\"),\n        resizeTo: window,\n        backgroundAlpha: 0,\n      });\n\n      app.stage.filters = [new KawaseBlurFilter(30, 20, true)];\n\n      const orbs = [];\n\n      let originX = window.innerWidth / 1.25;\n      let originY =\n        window.innerWidth < 1000\n          ? window.innerHeight\n          : window.innerHeight / 1.375;\n\n      for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0xff0000, originX, originY);\n        app.stage.addChild(orb.graphics);\n\n        orbs.push(orb);\n      }\n\n      originX = window.innerWidth * 0.2;\n      originY = window.innerWidth < 1000 ? 0 : window.innerHeight * 0.275;\n\n      for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0x0000ff, originX, originY);\n        app.stage.addChild(orb.graphics);\n\n        orbs.push(orb);\n      }\n\n      if (!window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches) {\n        app.ticker.add(() => {\n          orbs.forEach((orb) => {\n            orb.update();\n            orb.render();\n          });\n        });\n      } else {\n        orbs.forEach((orb) => {\n          orb.update();\n          orb.render();\n        });\n      }*/\n    });\n  },\n};\n</script>\n\n<style>\n@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {\n  #orb-sketch {\n    position: fixed;\n  }\n  .test {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n    background: rgba(170, 196, 200, 0.1);\n    backdrop-filter: saturate(180%) blur(3rem);\n    border: 10px black;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}