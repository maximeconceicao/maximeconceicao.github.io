{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport p5 from \"p5\";\nimport Orb from \"../helpers/Orb\";\nimport { onMounted } from \"@vue/runtime-core\";\nexport default {\n  name: \"SweetBackground\",\n  setup() {\n    onMounted(() => {\n      const sketch = s => {\n        let w = window.innerWidth;\n        let h = window.innerHeight;\n\n        //test\n        let cols = 10;\n        let rows = 10;\n        let cellWidth = w / cols;\n        let cellHeight = h / rows;\n        console.log(cellWidth, cellHeight);\n        //test\n\n        let orbs = [];\n        s.setup = () => {\n          s.createCanvas(w, h);\n          //s.noStroke();\n\n          //orbs = initOrbs();\n        };\n\n        s.draw = () => {\n          //s.background(0);\n          // for (const orb of orbs) {\n          //   orb.move(s);\n          //   orb.render(s);\n          // }\n          //test\n          for (let x = 0; x < w; x += cellWidth) {\n            for (let y = 0; y < h; y += cellHeight) {\n              console.log(\"x\", x, \"y\", y);\n              s.stroke(200, 0, 200);\n              s.rect(x, y, cellWidth, cellHeight);\n            }\n          }\n          //test\n        };\n\n        function initOrbs() {\n          const orbsArray = [];\n          let xPosInWidthPct = 0.7;\n          let yPosInHeightPct = 0.7;\n          let maxDistPct = 0.3;\n          for (let i = 0; i < 10; i++) {\n            const orb = new Orb(xPosInWidthPct, yPosInHeightPct, maxDistPct, s.color(\"#ff000040\"));\n            orbsArray.push(orb);\n          }\n          xPosInWidthPct = 0.3;\n          yPosInHeightPct = 0.3;\n          for (let i = 0; i < 10; i++) {\n            const orb = new Orb(xPosInWidthPct, yPosInHeightPct, maxDistPct, s.color(\"#0000ff40\"));\n            orbsArray.push(orb);\n          }\n          console.log(\"orbsArray\", orbsArray);\n          return orbsArray;\n        }\n        window.onresize = function () {\n          // assigns new values for width and height variables\n          w = window.innerWidth;\n          h = window.innerHeight;\n          s.resizeCanvas(w, h);\n          initOrbs();\n        };\n      };\n      new p5(sketch, \"orb-sketch\");\n    });\n  }\n};","map":{"version":3,"names":["p5","Orb","onMounted","name","setup","sketch","s","w","window","innerWidth","h","innerHeight","cols","rows","cellWidth","cellHeight","console","log","orbs","createCanvas","draw","x","y","stroke","rect","initOrbs","orbsArray","xPosInWidthPct","yPosInHeightPct","maxDistPct","i","orb","color","push","onresize","resizeCanvas"],"sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/components/SweetBackground.vue"],"sourcesContent":["<template>\n  <!-- Canvas -->\n\n  <div id=\"orb-sketch\"></div>\n  <div class=\"blur\"></div>\n  <div class=\"noise\"></div>\n</template>\n\n<script>\nimport p5 from \"p5\";\nimport Orb from \"../helpers/Orb\";\nimport { onMounted } from \"@vue/runtime-core\";\n\nexport default {\n  name: \"SweetBackground\",\n  setup() {\n    onMounted(() => {\n      const sketch = (s) => {\n        let w = window.innerWidth;\n        let h = window.innerHeight;\n\n        //test\n        let cols = 10;\n        let rows = 10;\n        let cellWidth = w / cols;\n        let cellHeight = h / rows;\n        console.log(cellWidth, cellHeight);\n        //test\n\n        let orbs = [];\n\n        s.setup = () => {\n          s.createCanvas(w, h);\n          //s.noStroke();\n\n          //orbs = initOrbs();\n        };\n\n        s.draw = () => {\n          //s.background(0);\n          // for (const orb of orbs) {\n          //   orb.move(s);\n          //   orb.render(s);\n          // }\n          //test\n          for (let x = 0; x < w; x += cellWidth) {\n            for (let y = 0; y < h; y += cellHeight) {\n              console.log(\"x\", x, \"y\", y);\n              s.stroke(200, 0, 200);\n              s.rect(x, y, cellWidth, cellHeight);\n            }\n          }\n          //test\n        };\n\n        function initOrbs() {\n          const orbsArray = [];\n          let xPosInWidthPct = 0.7;\n          let yPosInHeightPct = 0.7;\n          let maxDistPct = 0.3;\n\n          for (let i = 0; i < 10; i++) {\n            const orb = new Orb(\n              xPosInWidthPct,\n              yPosInHeightPct,\n              maxDistPct,\n              s.color(\"#ff000040\")\n            );\n            orbsArray.push(orb);\n          }\n\n          xPosInWidthPct = 0.3;\n          yPosInHeightPct = 0.3;\n\n          for (let i = 0; i < 10; i++) {\n            const orb = new Orb(\n              xPosInWidthPct,\n              yPosInHeightPct,\n              maxDistPct,\n              s.color(\"#0000ff40\")\n            );\n            orbsArray.push(orb);\n          }\n          console.log(\"orbsArray\", orbsArray);\n          return orbsArray;\n        }\n\n        window.onresize = function () {\n          // assigns new values for width and height variables\n          w = window.innerWidth;\n          h = window.innerHeight;\n          s.resizeCanvas(w, h);\n          initOrbs();\n        };\n      };\n\n      new p5(sketch, \"orb-sketch\");\n    });\n  },\n};\n</script>\n\n<style>\n@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {\n  #orb-sketch {\n    position: fixed;\n  }\n  .blur {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n    background: rgba(170, 196, 200, 0.1);\n    backdrop-filter: saturate(180%) blur(3rem);\n  }\n  .noise {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n    background-image: url(\"../assets/noise.png\");\n    background-size: auto;\n    background-repeat: repeat;\n    mix-blend-mode: overlay;\n    opacity: 0.2;\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}