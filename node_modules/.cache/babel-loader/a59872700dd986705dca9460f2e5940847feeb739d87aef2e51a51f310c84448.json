{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"game-timer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"p\", null, _toDisplayString($setup.secondsLeft), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$setup","secondsLeft"],"sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/components/SweetGame/SweetGameTimer.vue"],"sourcesContent":["<template>\n  <div class=\"game-timer\">\n    <p>{{ secondsLeft }}</p>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\n\nexport default {\n  name: \"SweetGameTimer\",\n  props: [\"startSeconds\"],\n  setup(props) {\n    const secondsLeft = ref(props.startSeconds);\n    let animationFrameId;\n\n    const updateTimer = () => {\n      const now = Date.now();\n      const deltaTime = Math.max(\n        0,\n        props.startSeconds * 1000 - (now - startTime)\n      );\n      secondsLeft.value = Math.floor(deltaTime / 1000);\n\n      if (deltaTime > 0) {\n        animationFrameId = requestAnimationFrame(updateTimer);\n      }\n    };\n\n    const startTimer = () => {\n      startTime = Date.now();\n      updateTimer();\n    };\n\n    const stopTimer = () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n\n    onMounted(() => {\n      startTimer();\n    });\n\n    onUnmounted(() => {\n      stopTimer();\n    });\n\n    return { secondsLeft };\n  },\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAY;;uBAAvBC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAwB,WAAAC,gBAAA,CAAlBC,MAAA,CAAAC,WAAW,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}