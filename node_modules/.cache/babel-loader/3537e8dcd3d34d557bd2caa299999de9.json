{"ast":null,"code":"import \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport { defineComponent, ref, onMounted } from \"vue\";\nimport SweetGameSequence from \"@/components/SweetGame/SweetGameSequence.vue\";\nimport SweetGameCells from \"@/components/SweetGame/SweetGameCells.vue\";\nimport SweetGameButtons from \"@/components/SweetGame/SweetGameButtons.vue\";\nimport SweetGameTimer from \"@/components/SweetGame/SweetGameTimer.vue\";\nimport { SHAPES, START_SEQUENCE_LENGTH } from \"@/helpers/game.constants\";\nimport { random } from \"@/helpers/utils.js\";\nexport default defineComponent({\n  name: \"GameView\",\n  components: {\n    SweetGameSequence,\n    SweetGameCells,\n    SweetGameButtons,\n    SweetGameTimer\n  },\n\n  setup() {\n    let sequenceLength = START_SEQUENCE_LENGTH;\n    let sequenceToFind = ref([]);\n    let playerSequence = ref([]);\n    let score = ref(0);\n\n    function resetGame() {\n      sequenceLength = START_SEQUENCE_LENGTH;\n      resetSequences();\n    }\n\n    function resetSequences() {\n      sequenceToFind.value = generateStartingSequence(sequenceLength);\n      playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n    }\n\n    function generateStartingSequence(sequenceLength) {\n      const generatedSequence = [];\n\n      for (let i = 0; i < sequenceLength; i++) {\n        let indexOfShape = Math.floor(random(0, Object.keys(SHAPES).length));\n        generatedSequence.push(Object.values(SHAPES)[indexOfShape]);\n      }\n\n      return generatedSequence;\n    }\n\n    function resetPlayerSequence(sequenceLength) {\n      return Array.apply(null, Array(sequenceLength)).map(() => {\n        return null;\n      });\n    }\n\n    function onDrawShape(shape) {\n      const index = playerSequence.value.findIndex(shape => shape === null);\n\n      if (index > -1) {\n        playerSequence.value[index] = shape;\n      } else {\n        playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n      }\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    function onClear() {\n      playerSequence.value = resetPlayerSequence(sequenceLength);\n    }\n\n    function validateSequence() {\n      if (JSON.stringify(playerSequence.value) === JSON.stringify(sequenceToFind.value)) {\n        score.value += 1;\n        sequenceLength += 1;\n        resetSequences();\n      }\n    }\n\n    function onReverse() {\n      let playerSequenceCopy = [...playerSequence.value];\n      playerSequenceCopy.forEach((shape, index) => {\n        switch (shape) {\n          case SHAPES.STAR:\n            playerSequence.value[index] = SHAPES.TRIANGLE;\n            break;\n\n          case SHAPES.SQUARE:\n            playerSequence.value[index] = SHAPES.CIRCLE;\n            break;\n\n          case SHAPES.TRIANGLE:\n            playerSequence.value[index] = SHAPES.STAR;\n            break;\n\n          case SHAPES.CIRCLE:\n            playerSequence.value[index] = SHAPES.SQUARE;\n            break;\n        }\n      });\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    onMounted(() => {\n      resetGame();\n      console.log(\"PLAYER SEQUENCE \", playerSequence.value.at(-1));\n    });\n    return {\n      sequenceToFind,\n      playerSequence,\n      score,\n      onDrawShape,\n      onReverse,\n      onClear\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["defineComponent","ref","onMounted","SweetGameSequence","SweetGameCells","SweetGameButtons","SweetGameTimer","SHAPES","START_SEQUENCE_LENGTH","random","name","components","setup","sequenceLength","sequenceToFind","playerSequence","score","resetGame","resetSequences","value","generateStartingSequence","resetPlayerSequence","length","generatedSequence","i","indexOfShape","Math","floor","Object","keys","push","values","Array","apply","map","onDrawShape","shape","index","findIndex","at","validateSequence","onClear","JSON","stringify","onReverse","playerSequenceCopy","forEach","STAR","TRIANGLE","SQUARE","CIRCLE","console","log"],"sourceRoot":"","sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/views/GameView.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"sticky-header\">\n      <header>\n        <router-link :to=\"{ name: 'home' }\"\n          ><span class=\"material-icons\">arrow_back</span></router-link\n        >\n      </header>\n    </div>\n    <main id=\"main-game\">\n      <sweet-game-sequence :sequenceToFind=\"sequenceToFind\" />\n      <sweet-game-cells\n        v-if=\"playerSequence?.length\"\n        :playerSequence=\"playerSequence\"\n      />\n      <sweet-game-buttons\n        @drawShape=\"onDrawShape\"\n        @reverse=\"onReverse\"\n        @clear=\"onClear\"\n      />\n      <p class=\"game-score\">SCORE : {{ score }}</p>\n      <sweet-game-timer />\n    </main>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref, onMounted } from \"vue\";\nimport SweetGameSequence from \"@/components/SweetGame/SweetGameSequence.vue\";\nimport SweetGameCells from \"@/components/SweetGame/SweetGameCells.vue\";\nimport SweetGameButtons from \"@/components/SweetGame/SweetGameButtons.vue\";\nimport SweetGameTimer from \"@/components/SweetGame/SweetGameTimer.vue\";\n\nimport { SHAPES, START_SEQUENCE_LENGTH } from \"@/helpers/game.constants\";\nimport { random } from \"@/helpers/utils.js\";\n\nexport default defineComponent({\n  name: \"GameView\",\n  components: {\n    SweetGameSequence,\n    SweetGameCells,\n    SweetGameButtons,\n    SweetGameTimer,\n  },\n  setup() {\n    let sequenceLength = START_SEQUENCE_LENGTH;\n    let sequenceToFind = ref([]);\n    let playerSequence = ref([]);\n    let score = ref(0);\n\n    function resetGame() {\n      sequenceLength = START_SEQUENCE_LENGTH;\n      resetSequences();\n    }\n\n    function resetSequences() {\n      sequenceToFind.value = generateStartingSequence(sequenceLength);\n      playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n    }\n\n    function generateStartingSequence(sequenceLength) {\n      const generatedSequence = [];\n      for (let i = 0; i < sequenceLength; i++) {\n        let indexOfShape = Math.floor(random(0, Object.keys(SHAPES).length));\n        generatedSequence.push(Object.values(SHAPES)[indexOfShape]);\n      }\n      return generatedSequence;\n    }\n\n    function resetPlayerSequence(sequenceLength) {\n      return Array.apply(null, Array(sequenceLength)).map(() => {\n        return null;\n      });\n    }\n\n    function onDrawShape(shape) {\n      const index = playerSequence.value.findIndex((shape) => shape === null);\n\n      if (index > -1) {\n        playerSequence.value[index] = shape;\n      } else {\n        playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n      }\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    function onClear() {\n      playerSequence.value = resetPlayerSequence(sequenceLength);\n    }\n\n    function validateSequence() {\n      if (\n        JSON.stringify(playerSequence.value) ===\n        JSON.stringify(sequenceToFind.value)\n      ) {\n        score.value += 1;\n        sequenceLength += 1;\n        resetSequences();\n      }\n    }\n\n    function onReverse() {\n      let playerSequenceCopy = [...playerSequence.value];\n      playerSequenceCopy.forEach((shape, index) => {\n        switch (shape) {\n          case SHAPES.STAR:\n            playerSequence.value[index] = SHAPES.TRIANGLE;\n            break;\n          case SHAPES.SQUARE:\n            playerSequence.value[index] = SHAPES.CIRCLE;\n            break;\n          case SHAPES.TRIANGLE:\n            playerSequence.value[index] = SHAPES.STAR;\n            break;\n          case SHAPES.CIRCLE:\n            playerSequence.value[index] = SHAPES.SQUARE;\n            break;\n        }\n      });\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    onMounted(() => {\n      resetGame();\n      console.log(\"PLAYER SEQUENCE \", playerSequence.value.at(-1));\n    });\n    return {\n      sequenceToFind,\n      playerSequence,\n      score,\n      onDrawShape,\n      onReverse,\n      onClear,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}