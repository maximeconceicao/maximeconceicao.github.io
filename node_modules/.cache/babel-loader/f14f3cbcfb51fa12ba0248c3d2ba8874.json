{"ast":null,"code":"import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, resolveComponent as _resolveComponent, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"scroll\",\n  class: \"o-scroll\"\n};\nconst _hoisted_2 = {\n  ref: \"scrollInner\"\n};\nconst _hoisted_3 = {\n  id: \"main\",\n  ref: \"main\",\n  class: \"l-main\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass($options.className),\n    ref: \"wrapper\"\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"main\", _hoisted_3, [_createVNode(_component_router_view, null, {\n    default: _withCtx(({\n      Component\n    }) => [_createVNode(_Transition, {\n      name: \"fade\",\n      mode: \"out-in\"\n    }, {\n      default: _withCtx(() => [(_openBlock(), _createBlock(_resolveDynamicComponent(Component)))]),\n      _: 2\n      /* DYNAMIC */\n\n    }, 1024\n    /* DYNAMIC_SLOTS */\n    )]),\n    _: 1\n    /* STABLE */\n\n  })], 512\n  /* NEED_PATCH */\n  )], 512\n  /* NEED_PATCH */\n  )], 512\n  /* NEED_PATCH */\n  )], 2\n  /* CLASS */\n  );\n}","map":{"version":3,"mappings":";;AAESA,KAAG,EAAC;AAASC,OAAK,EAAC;;;AACjBD,KAAG,EAAC;;;AACDE,IAAE,EAAC;AAAOF,KAAG,EAAC;AAAOC,OAAK,EAAC;;;;;uBAHvCE,oBAYM,KAZN,EAYM;AAZAF,SAAK,kBAAEG,kBAAF,CAYL;AAZkBJ,OAAG,EAAC;AAYtB,GAZN,GACEK,oBAUM,KAVN,cAUM,CATJA,oBAQM,KARN,cAQM,CAPJA,oBAMO,MANP,cAMO,CALLC,aAIcC,sBAJd,EAIc,IAJd,EAIc;sBAHZ,CAEa;AAHQC;AAGR,KAFb,KAD8B,CAC9BF,aAEaG,WAFb,EAEa;AAFDC,UAAI,EAAC,MAEJ;AAFWC,UAAI,EAAC;AAEhB,KAFb;wBACE,MAA6B,gBAA7BC,aAA6BC,yBAAbL,SAAa,CAA7B,CAA6B;;;;KAD/B;;AAAA,KAD8B,EAIlB;;;;AAAA,GAJd,CAKK,CANP;;AAAA,GAOI,CARN;;AAAA,GASI,CAVN;;AAAA,IADF;;AAAA","names":["ref","class","id","_createElementBlock","$options","_createElementVNode","_createVNode","_component_router_view","Component","_Transition","name","mode","_createBlock","_resolveDynamicComponent"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/layout/AppBase.vue"],"sourcesContent":["<template>\n  <div :class=\"className\" ref=\"wrapper\">\n    <div ref=\"scroll\" class=\"o-scroll\">\n      <div ref=\"scrollInner\">\n        <main id=\"main\" ref=\"main\" class=\"l-main\">\n          <router-view v-slot=\"{ Component }\">\n            <transition name=\"fade\" mode=\"out-in\">\n              <component :is=\"Component\" />\n            </transition>\n          </router-view>\n        </main>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { gsap, ScrollTrigger } from \"../gsap\";\n\nconst $html = document.documentElement;\nconst IS_MOBILE =\n  /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  ) ||\n  (navigator.platform === \"MacIntel\" && navigator.maxTouchPoints > 1);\n\nexport default {\n  name: \"AppBase\",\n  components: {},\n  data: () => ({\n    navIsOpen: false,\n  }),\n  computed: {\n    className() {\n      let classname = \"l-wrapper\";\n\n      /*if (this.currentPageName) {\n        classname += ` p-${this.currentPageName}`;\n      }*/\n\n      // Add nav state\n      if (this.navIsOpen) {\n        classname += \" nav-is-open\";\n      }\n\n      return classname;\n    },\n  },\n  methods: {\n    // this is the helper function that sets it all up. Pass in the content <div> and then the wrapping viewport <div> (can be the elements or selector text). It also sets the default \"scroller\" to the content so you don't have to do that on all your ScrollTriggers.\n    smoothScroll() {\n      const smoothness = 1;\n\n      gsap.set(this.$refs.scroll, {\n        overflow: \"hidden\",\n        position: \"fixed\",\n        height: \"100%\",\n        width: \"100%\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      });\n\n      gsap.set(this.$refs.scrollInner, { overflow: \"visible\", width: \"100%\" });\n\n      //https://greensock.com/docs/v3/GSAP/gsap.getProperty()\n      //Reusable getter function\n      //If you omit the property parameter, gsap.getProperty() will return a getter function that you can reuse to grab properties of that target object:\n\n      const getProp = gsap.getProperty(this.$refs.scrollInner);\n\n      //Think of a quickSetter like an optimized function tied to a particular target's (or set of targets') property,\n      // where it directly pipes data to it and skips convenience tasks in a normal gsap.set()\n\n      const setProp = gsap.quickSetter(this.$refs.scrollInner, \"y\", \"px\");\n\n      const setScroll = ScrollTrigger.getScrollFunc(window);\n\n      const removeScroll = () =>\n        (this.$refs.scrollInner.style.overflow = \"visible\");\n\n      const killScrub = (trigger) => {\n        let scrub = trigger.getTween();\n        scrub && scrub.kill();\n        trigger.animation.progress(trigger.progress);\n      };\n\n      let isProxyScrolling;\n\n      const refreshSmoothScroll = () => {\n        this.scrollHeight = this.$refs.scrollInner.clientHeight;\n        this.$refs.scrollInner.style.overflow = \"visible\";\n        $html.style.height = this.scrollHeight + \"px\";\n      };\n\n      refreshSmoothScroll();\n\n      ScrollTrigger.addEventListener(\n        \"refreshInit\",\n        refreshSmoothScroll.bind(this)\n      );\n      ScrollTrigger.addEventListener(\"refresh\", () => {\n        //removeScroll();\n        //requestAnimationFrame(removeScroll);\n      });\n      ScrollTrigger.defaults({ scroller: this.$refs.scrollInner });\n\n      ScrollTrigger.scrollerProxy(this.$refs.scrollInner, {\n        scrollTop(value) {\n          if (arguments.length) {\n            isProxyScrolling = true; // otherwise, if snapping was applied (or anything that attempted to SET the scroll proxy's scroll position), we'd set the scroll here which would then (on the next tick) update the content tween/ScrollTrigger which would try to smoothly animate to that new value, thus the scrub tween would impede the progress. So we use this flag to respond accordingly in the ScrollTrigger's onUpdate and effectively force the scrub to its end immediately.\n            setProp(-value);\n            setScroll(value);\n            return;\n          }\n          return -getProp(\"y\");\n        },\n        getBoundingClientRect() {\n          return {\n            top: 0,\n            left: 0,\n            width: window.innerWidth,\n            height: window.innerHeight,\n          };\n        },\n      });\n\n      return ScrollTrigger.create({\n        animation: gsap.fromTo(\n          this.$refs.scrollInner,\n          { y: 0 },\n          {\n            y: () => document.documentElement.clientHeight - this.scrollHeight,\n            ease: \"none\",\n            onUpdate: ScrollTrigger.update,\n          }\n        ),\n        scroller: window,\n        invalidateOnRefresh: true,\n        start: 0,\n        end: () => this.scrollHeight - document.documentElement.clientHeight,\n        scrub: smoothness,\n        onUpdate: (self) => {\n          if (isProxyScrolling) {\n            killScrub(self);\n            isProxyScrolling = false;\n          }\n        },\n        //onRefresh: killScrub, // when the screen resizes, we just want the animation to immediately go to the appropriate spot rather than animating there, so basically kill the scrub.\n      });\n    },\n  },\n\n  mounted() {\n    console.log(\"APP BASE MOUNTED\");\n    this.scroller = IS_MOBILE ? false : this.smoothScroll();\n\n    // Watch body height change\n    let timeout;\n    const resizeObserver = new ResizeObserver(() => {\n      console.log(\"RESIZE OBSERVER\");\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n\n      timeout = setTimeout(() => {\n        ScrollTrigger.refresh();\n      }, 200);\n    });\n\n    resizeObserver.observe(this.$refs.main);\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.l-wrapper {\n  html.is-ready & {\n    transition: color 0.4s cubic-bezier(0.3, 1, 0.7, 1);\n  }\n}\n\n.o-scroll {\n  html.is-ready & {\n    transition: background-color 0.4s cubic-bezier(0.3, 1, 0.7, 1);\n  }\n}\n\n.l-main {\n  min-height: vh(100);\n  opacity: 1;\n  transform: translate(0, vh(-20));\n  transition: opacity 0.6s cubic-bezier(0.3, 1, 0.7, 1),\n    transform 0.6s cubic-bezier(0.3, 1, 0.7, 1);\n\n  html.is-loading & {\n    transform: translate(0, vh(20));\n    transition: opacity 0.8s cubic-bezier(0.3, 1, 0.7, 1),\n      transform 0.8s cubic-bezier(0.3, 1, 0.7, 1);\n  }\n\n  html.is-ready & {\n    opacity: 1;\n    transform: translate(0);\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}