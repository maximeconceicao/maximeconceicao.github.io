{"ast":null,"code":"import { defineComponent, ref, onMounted } from \"vue\";\nimport SweetGameSequence from \"@/components/SweetGameSequence.vue\";\nimport SweetGameCells from \"@/components/SweetGameCells.vue\";\nimport SweetGameButtons from \"@/components/SweetGameButtons.vue\";\nimport { SHAPES, START_SEQUENCE_LENGTH } from \"@/helpers/game.constants\";\nimport { random } from \"@/helpers/utils.js\";\nexport default defineComponent({\n  name: \"GameView\",\n  components: {\n    SweetGameSequence,\n    SweetGameCells,\n    SweetGameButtons\n  },\n\n  setup() {\n    let sequenceToFind = ref([]);\n    let playerSequence = ref([]);\n    let score = 0;\n\n    function resetGame() {\n      sequenceToFind.value = generateStartingSequence(START_SEQUENCE_LENGTH);\n      console.log(\"SEQUENCE TO FIND : \", sequenceToFind.value);\n      playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n      console.log(\"PLAYER SEQUENCE : \", playerSequence.value);\n    }\n\n    function generateStartingSequence(sequenceLength) {\n      const generatedSequence = [];\n\n      for (let i = 0; i < START_SEQUENCE_LENGTH; i++) {\n        let indexOfShape = Math.floor(random(0, Object.keys(SHAPES).length));\n        generatedSequence.push(Object.values(SHAPES)[indexOfShape]);\n      }\n\n      return generatedSequence;\n    }\n\n    function resetPlayerSequence(sequenceLength) {\n      console.log(\"RESET PLAYER SEQUENCE : \", sequenceLength);\n      return Array.apply(null, Array(sequenceLength)).map(() => {\n        return 0;\n      });\n    }\n\n    function onDrawShape(shape) {\n      console.log(\"On Draw Shape ! \", shape, playerSequence.value);\n    }\n\n    function onReverse() {\n      console.log(\"REVERSE !\");\n    }\n\n    onMounted(() => {\n      resetGame();\n      console.log(\"PLAYER SEQUENCE \", playerSequence.value);\n    });\n    return {\n      sequenceToFind,\n      playerSequence,\n      onDrawShape,\n      onReverse\n    };\n  }\n\n});","map":{"version":3,"mappings":"AAYA,SAASA,eAAT,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,KAAhD;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,SAASC,MAAT,EAAiBC,qBAAjB,QAA8C,0BAA9C;AACA,SAASC,MAAT,QAAuB,oBAAvB;AAEA,eAAeR,eAAe,CAAC;AAC7BS,MAAI,EAAE,UADuB;AAE7BC,YAAU,EAAE;AAAEP,qBAAF;AAAqBC,kBAArB;AAAqCC;AAArC,GAFiB;;AAG7BM,OAAK,GAAG;AACN,QAAIC,cAAa,GAAIX,GAAG,CAAC,EAAD,CAAxB;AACA,QAAIY,cAAa,GAAIZ,GAAG,CAAC,EAAD,CAAxB;AACA,QAAIa,KAAI,GAAI,CAAZ;;AAEA,aAASC,SAAT,GAAqB;AACnBH,oBAAc,CAACI,KAAf,GAAuBC,wBAAwB,CAACV,qBAAD,CAA/C;AACAW,aAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCP,cAAc,CAACI,KAAlD;AACAH,oBAAc,CAACG,KAAf,GAAuBI,mBAAmB,CAACR,cAAc,CAACI,KAAf,CAAqBK,MAAtB,CAA1C;AACAH,aAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCN,cAAc,CAACG,KAAjD;AACF;;AAEA,aAASC,wBAAT,CAAkCK,cAAlC,EAAkD;AAChD,YAAMC,iBAAgB,GAAI,EAA1B;;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIjB,qBAApB,EAA2CiB,CAAC,EAA5C,EAAgD;AAC9C,YAAIC,YAAW,GAAIC,IAAI,CAACC,KAAL,CAAWnB,MAAM,CAAC,CAAD,EAAIoB,MAAM,CAACC,IAAP,CAAYvB,MAAZ,EAAoBe,MAAxB,CAAjB,CAAnB;AACAE,yBAAiB,CAACO,IAAlB,CAAuBF,MAAM,CAACG,MAAP,CAAczB,MAAd,EAAsBmB,YAAtB,CAAvB;AACF;;AACA,aAAOF,iBAAP;AACF;;AAEA,aAASH,mBAAT,CAA6BE,cAA7B,EAA6C;AAC3CJ,aAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCG,cAAxC;AACA,aAAOU,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBD,KAAK,CAACV,cAAD,CAAvB,EAAyCY,GAAzC,CAA6C,MAAM;AACxD,eAAO,CAAP;AACD,OAFM,CAAP;AAGF;;AAEA,aAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1BlB,aAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCiB,KAAhC,EAAuCvB,cAAc,CAACG,KAAtD;AACF;;AAEA,aAASqB,SAAT,GAAqB;AACnBnB,aAAO,CAACC,GAAR,CAAY,WAAZ;AACF;;AAEAjB,aAAS,CAAC,MAAM;AACda,eAAS;AACTG,aAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCN,cAAc,CAACG,KAA/C;AACD,KAHQ,CAAT;AAIA,WAAO;AAAEJ,oBAAF;AAAkBC,oBAAlB;AAAkCsB,iBAAlC;AAA+CE;AAA/C,KAAP;AACD;;AA5C4B,CAAD,CAA9B","names":["defineComponent","ref","onMounted","SweetGameSequence","SweetGameCells","SweetGameButtons","SHAPES","START_SEQUENCE_LENGTH","random","name","components","setup","sequenceToFind","playerSequence","score","resetGame","value","generateStartingSequence","console","log","resetPlayerSequence","length","sequenceLength","generatedSequence","i","indexOfShape","Math","floor","Object","keys","push","values","Array","apply","map","onDrawShape","shape","onReverse"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/views/GameView.vue"],"sourcesContent":["<template>\n  <main id=\"main-game\">\n    <sweet-game-sequence :sequenceToFind=\"sequenceToFind\" />\n    <sweet-game-cells\n      v-if=\"playerSequence?.length\"\n      :playerSequence=\"playerSequence\"\n    />\n    <sweet-game-buttons @drawShape=\"onDrawShape\" @reverse=\"onReverse\" />\n  </main>\n</template>\n\n<script>\nimport { defineComponent, ref, onMounted } from \"vue\";\nimport SweetGameSequence from \"@/components/SweetGameSequence.vue\";\nimport SweetGameCells from \"@/components/SweetGameCells.vue\";\nimport SweetGameButtons from \"@/components/SweetGameButtons.vue\";\nimport { SHAPES, START_SEQUENCE_LENGTH } from \"@/helpers/game.constants\";\nimport { random } from \"@/helpers/utils.js\";\n\nexport default defineComponent({\n  name: \"GameView\",\n  components: { SweetGameSequence, SweetGameCells, SweetGameButtons },\n  setup() {\n    let sequenceToFind = ref([]);\n    let playerSequence = ref([]);\n    let score = 0;\n\n    function resetGame() {\n      sequenceToFind.value = generateStartingSequence(START_SEQUENCE_LENGTH);\n      console.log(\"SEQUENCE TO FIND : \", sequenceToFind.value);\n      playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n      console.log(\"PLAYER SEQUENCE : \", playerSequence.value);\n    }\n\n    function generateStartingSequence(sequenceLength) {\n      const generatedSequence = [];\n      for (let i = 0; i < START_SEQUENCE_LENGTH; i++) {\n        let indexOfShape = Math.floor(random(0, Object.keys(SHAPES).length));\n        generatedSequence.push(Object.values(SHAPES)[indexOfShape]);\n      }\n      return generatedSequence;\n    }\n\n    function resetPlayerSequence(sequenceLength) {\n      console.log(\"RESET PLAYER SEQUENCE : \", sequenceLength);\n      return Array.apply(null, Array(sequenceLength)).map(() => {\n        return 0;\n      });\n    }\n\n    function onDrawShape(shape) {\n      console.log(\"On Draw Shape ! \", shape, playerSequence.value);\n    }\n\n    function onReverse() {\n      console.log(\"REVERSE !\");\n    }\n\n    onMounted(() => {\n      resetGame();\n      console.log(\"PLAYER SEQUENCE \", playerSequence.value);\n    });\n    return { sequenceToFind, playerSequence, onDrawShape, onReverse };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}