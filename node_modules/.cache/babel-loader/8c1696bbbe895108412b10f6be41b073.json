{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport Orb from \"../helpers/Orb\";\nimport { KawaseBlurFilter } from \"@pixi/filter-kawase-blur\";\nexport default {\n  name: \"SweetBackground\",\n  components: {},\n  methods: {},\n\n  mounted() {\n    // Create PixiJS app\n    const app = new PIXI.Application({\n      // render to <canvas class=\"orb-canvas\"></canvas>\n      view: document.querySelector(\".orb-canvas\"),\n      // auto adjust size to fit the current window\n      resizeTo: window,\n      // transparent background, we will be creating a gradient background later using CSS\n      backgroundAlpha: 0\n    });\n    app.stage.filters = [new KawaseBlurFilter(30, 10, true)]; // Create orbs\n\n    const orbs = [];\n\n    for (let i = 0; i < 10; i++) {\n      // each orb will be black, just for now\n      const orb = new Orb(0x000000);\n      app.stage.addChild(orb.graphics);\n      orbs.push(orb);\n    }\n\n    if (!window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches) {\n      app.ticker.add(() => {\n        // update and render each orb, each frame. app.ticker attempts to run at 60fps\n        orbs.forEach(orb => {\n          orb.update();\n          orb.render();\n        });\n      });\n    } else {\n      // perform one update and render per orb, do not animate\n      orbs.forEach(orb => {\n        orb.update();\n        orb.render();\n      });\n    }\n  }\n\n};","map":{"version":3,"mappings":"AAKA,OAAO,KAAKA,IAAZ,MAAsB,SAAtB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,eAAe;AACbC,MAAI,EAAE,iBADO;AAEbC,YAAU,EAAE,EAFC;AAGbC,SAAO,EAAE,EAHI;;AAIbC,SAAO,GAAG;AACR;AACA,UAAMC,GAAE,GAAI,IAAIP,IAAI,CAACQ,WAAT,CAAqB;AAC/B;AACAC,UAAI,EAAEC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAFyB;AAG/B;AACAC,cAAQ,EAAEC,MAJqB;AAK/B;AACAC,qBAAe,EAAE;AANc,KAArB,CAAZ;AASAP,OAAG,CAACQ,KAAJ,CAAUC,OAAV,GAAoB,CAAC,IAAId,gBAAJ,CAAqB,EAArB,EAAyB,EAAzB,EAA6B,IAA7B,CAAD,CAApB,CAXQ,CAaR;;AACA,UAAMe,IAAG,GAAI,EAAb;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B;AACA,YAAMC,GAAE,GAAI,IAAIlB,GAAJ,CAAQ,QAAR,CAAZ;AACAM,SAAG,CAACQ,KAAJ,CAAUK,QAAV,CAAmBD,GAAG,CAACE,QAAvB;AAEAJ,UAAI,CAACK,IAAL,CAAUH,GAAV;AACF;;AAEA,QAAI,CAACN,MAAM,CAACU,UAAP,CAAkB,kCAAlB,EAAsDC,OAA3D,EAAoE;AAClEjB,SAAG,CAACkB,MAAJ,CAAWC,GAAX,CAAe,MAAM;AACnB;AACAT,YAAI,CAACU,OAAL,CAAcR,GAAD,IAAS;AACpBA,aAAG,CAACS,MAAJ;AACAT,aAAG,CAACU,MAAJ;AACD,SAHD;AAID,OAND;AAOF,KARA,MAQO;AACL;AACAZ,UAAI,CAACU,OAAL,CAAcR,GAAD,IAAS;AACpBA,WAAG,CAACS,MAAJ;AACAT,WAAG,CAACU,MAAJ;AACD,OAHD;AAIF;AACD;;AA3CY,CAAf","names":["PIXI","Orb","KawaseBlurFilter","name","components","methods","mounted","app","Application","view","document","querySelector","resizeTo","window","backgroundAlpha","stage","filters","orbs","i","orb","addChild","graphics","push","matchMedia","matches","ticker","add","forEach","update","render"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/components/SweetBackground.vue"],"sourcesContent":["<template>\n  <canvas class=\"orb-canvas\"></canvas>\n</template>\n\n<script>\nimport * as PIXI from \"pixi.js\";\nimport Orb from \"../helpers/Orb\";\nimport { KawaseBlurFilter } from \"@pixi/filter-kawase-blur\";\n\nexport default {\n  name: \"SweetBackground\",\n  components: {},\n  methods: {},\n  mounted() {\n    // Create PixiJS app\n    const app = new PIXI.Application({\n      // render to <canvas class=\"orb-canvas\"></canvas>\n      view: document.querySelector(\".orb-canvas\"),\n      // auto adjust size to fit the current window\n      resizeTo: window,\n      // transparent background, we will be creating a gradient background later using CSS\n      backgroundAlpha: 0,\n    });\n\n    app.stage.filters = [new KawaseBlurFilter(30, 10, true)];\n\n    // Create orbs\n    const orbs = [];\n\n    for (let i = 0; i < 10; i++) {\n      // each orb will be black, just for now\n      const orb = new Orb(0x000000);\n      app.stage.addChild(orb.graphics);\n\n      orbs.push(orb);\n    }\n\n    if (!window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches) {\n      app.ticker.add(() => {\n        // update and render each orb, each frame. app.ticker attempts to run at 60fps\n        orbs.forEach((orb) => {\n          orb.update();\n          orb.render();\n        });\n      });\n    } else {\n      // perform one update and render per orb, do not animate\n      orbs.forEach((orb) => {\n        orb.update();\n        orb.render();\n      });\n    }\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}