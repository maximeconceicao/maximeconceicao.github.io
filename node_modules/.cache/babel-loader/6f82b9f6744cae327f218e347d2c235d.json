{"ast":null,"code":"import FlapText from \"../helpers/FlapText\";\nexport default {\n  name: \"FlapText\",\n\n  mounted() {\n    const characters = \"\\\"'“”‘’¹²³!#$&%()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~½¼¡«»×▓▒░│┤▀└┴┬├─┼┐┌└┘\".split(\"\");\n\n    (function () {\n      const flapTextElements = [];\n      let textIndex = 0;\n      document.querySelectorAll(\".flap\").forEach(flapElement => {\n        const lines = flapElement.innerText.trimEnd().split(\"\\n\").map(line => line.trimEnd().replaceAll(\"\\t\", \"\"));\n        flapElement.innerHTML = \"\";\n\n        if (flapElement.getAttribute(\"data-offset\") === \"0\") {\n          textIndex = 0;\n        }\n\n        lines.forEach(line => {\n          const span = document.createElement(\"span\");\n          span.dataset.paused = \"true\";\n          flapElement.appendChild(span);\n          new IntersectionObserver(entries => {\n            if (entries[0].isIntersecting === true) {\n              span.dataset.paused = \"false\";\n            }\n          }, {\n            threshold: [0]\n          }).observe(span);\n          const flapText = new FlapText(span, characters);\n          flapText.setInitialPositions(line);\n          flapText.render();\n          flapText.shiftRandomly(5 * textIndex++, 1);\n          span.addEventListener(\"mouseenter\", () => {\n            flapText.shufflePositions();\n          });\n          flapTextElements.push(flapText);\n        });\n      });\n      let frameCount = 0;\n      requestAnimationFrame(function animate() {\n        requestAnimationFrame(animate);\n\n        if (frameCount++ % 2 === 0) {\n          for (const flapText of flapTextElements) {\n            flapText.flap();\n            flapText.render();\n          }\n        }\n      });\n      document.querySelectorAll(\".flap\").forEach(flapElement => {\n        flapElement.classList.remove(\"hidden\");\n      });\n    })();\n  }\n\n};","map":{"version":3,"mappings":"AASA,OAAOA,QAAP,MAAqB,qBAArB;AAEA,eAAe;AACbC,MAAI,EAAE,UADO;;AAEbC,SAAO,GAAG;AACR,UAAMC,UAAS,GACb,gIAAgIC,KAAhI,CACE,EADF,CADF;;AAKA,KAAC,YAAY;AACX,YAAMC,gBAAe,GAAI,EAAzB;AACA,UAAIC,SAAQ,GAAI,CAAhB;AAEAC,cAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCC,OAAnC,CAA4CC,WAAD,IAAiB;AAC1D,cAAMC,KAAI,GAAID,WAAW,CAACE,SAAZ,CACXC,OADW,GAEXT,KAFW,CAEL,IAFK,EAGXU,GAHW,CAGNC,IAAD,IAAUA,IAAI,CAACF,OAAL,GAAeG,UAAf,CAA0B,IAA1B,EAAgC,EAAhC,CAHH,CAAd;AAIAN,mBAAW,CAACO,SAAZ,GAAwB,EAAxB;;AACA,YAAIP,WAAW,CAACQ,YAAZ,CAAyB,aAAzB,MAA4C,GAAhD,EAAqD;AACnDZ,mBAAQ,GAAI,CAAZ;AACF;;AACAK,aAAK,CAACF,OAAN,CAAeM,IAAD,IAAU;AACtB,gBAAMI,IAAG,GAAIZ,QAAQ,CAACa,aAAT,CAAuB,MAAvB,CAAb;AACAD,cAAI,CAACE,OAAL,CAAaC,MAAb,GAAsB,MAAtB;AACAZ,qBAAW,CAACa,WAAZ,CAAwBJ,IAAxB;AAEA,cAAIK,oBAAJ,CACGC,OAAD,IAAa;AACX,gBAAIA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,KAA8B,IAAlC,EAAwC;AACtCP,kBAAI,CAACE,OAAL,CAAaC,MAAb,GAAsB,OAAtB;AACF;AACD,WALH,EAME;AAAEK,qBAAS,EAAE,CAAC,CAAD;AAAb,WANF,EAOEC,OAPF,CAOUT,IAPV;AASA,gBAAMU,QAAO,GAAI,IAAI7B,QAAJ,CAAamB,IAAb,EAAmBhB,UAAnB,CAAjB;AACA0B,kBAAQ,CAACC,mBAAT,CAA6Bf,IAA7B;AACAc,kBAAQ,CAACE,MAAT;AACAF,kBAAQ,CAACG,aAAT,CAAuB,IAAI1B,SAAS,EAApC,EAAwC,CAAxC;AAEAa,cAAI,CAACc,gBAAL,CAAsB,YAAtB,EAAoC,MAAM;AACxCJ,oBAAQ,CAACK,gBAAT;AACD,WAFD;AAIA7B,0BAAgB,CAAC8B,IAAjB,CAAsBN,QAAtB;AACD,SAxBD;AAyBD,OAlCD;AAoCA,UAAIO,UAAS,GAAI,CAAjB;AACAC,2BAAqB,CAAC,SAASC,OAAT,GAAmB;AACvCD,6BAAqB,CAACC,OAAD,CAArB;;AACA,YAAIF,UAAU,KAAK,CAAf,KAAqB,CAAzB,EAA4B;AAC1B,eAAK,MAAMP,QAAX,IAAuBxB,gBAAvB,EAAyC;AACvCwB,oBAAQ,CAACU,IAAT;AACAV,oBAAQ,CAACE,MAAT;AACF;AACF;AACD,OARoB,CAArB;AAUAxB,cAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCC,OAAnC,CAA4CC,WAAD,IAAiB;AAC1DA,mBAAW,CAAC8B,SAAZ,CAAsBC,MAAtB,CAA6B,QAA7B;AACD,OAFD;AAGD,KAtDD;AAuDD;;AA/DY,CAAf","names":["FlapText","name","mounted","characters","split","flapTextElements","textIndex","document","querySelectorAll","forEach","flapElement","lines","innerText","trimEnd","map","line","replaceAll","innerHTML","getAttribute","span","createElement","dataset","paused","appendChild","IntersectionObserver","entries","isIntersecting","threshold","observe","flapText","setInitialPositions","render","shiftRandomly","addEventListener","shufflePositions","push","frameCount","requestAnimationFrame","animate","flap","classList","remove"],"sourceRoot":"","sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/components/FlapText.vue"],"sourcesContent":["<template>\n  <!-- Vous pouvez ajouter le HTML associé ici si nécessaire -->\n  <p class=\"flap\">\n    <!-- Contenu de votre composant FlapText -->\n    Phrase test pour flap text !\n  </p>\n</template>\n\n<script>\nimport FlapText from \"../helpers/FlapText\";\n\nexport default {\n  name: \"FlapText\",\n  mounted() {\n    const characters =\n      \"\\\"'“”‘’¹²³!#$&%()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~½¼¡«»×▓▒░│┤▀└┴┬├─┼┐┌└┘\".split(\n        \"\"\n      );\n\n    (function () {\n      const flapTextElements = [];\n      let textIndex = 0;\n\n      document.querySelectorAll(\".flap\").forEach((flapElement) => {\n        const lines = flapElement.innerText\n          .trimEnd()\n          .split(\"\\n\")\n          .map((line) => line.trimEnd().replaceAll(\"\\t\", \"\"));\n        flapElement.innerHTML = \"\";\n        if (flapElement.getAttribute(\"data-offset\") === \"0\") {\n          textIndex = 0;\n        }\n        lines.forEach((line) => {\n          const span = document.createElement(\"span\");\n          span.dataset.paused = \"true\";\n          flapElement.appendChild(span);\n\n          new IntersectionObserver(\n            (entries) => {\n              if (entries[0].isIntersecting === true) {\n                span.dataset.paused = \"false\";\n              }\n            },\n            { threshold: [0] }\n          ).observe(span);\n\n          const flapText = new FlapText(span, characters);\n          flapText.setInitialPositions(line);\n          flapText.render();\n          flapText.shiftRandomly(5 * textIndex++, 1);\n\n          span.addEventListener(\"mouseenter\", () => {\n            flapText.shufflePositions();\n          });\n\n          flapTextElements.push(flapText);\n        });\n      });\n\n      let frameCount = 0;\n      requestAnimationFrame(function animate() {\n        requestAnimationFrame(animate);\n        if (frameCount++ % 2 === 0) {\n          for (const flapText of flapTextElements) {\n            flapText.flap();\n            flapText.render();\n          }\n        }\n      });\n\n      document.querySelectorAll(\".flap\").forEach((flapElement) => {\n        flapElement.classList.remove(\"hidden\");\n      });\n    })();\n  },\n};\n</script>\n\n<style scoped>\n/* Styles spécifiques au composant ici, ou utilisez des classes externes */\n</style>\n"]},"metadata":{},"sourceType":"module"}