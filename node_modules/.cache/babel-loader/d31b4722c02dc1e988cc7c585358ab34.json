{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport SimplexNoise from \"simplex-noise\";\nimport { debounce } from \"debounce\";\nimport utils from \"./utils\";\nconst simplex = new SimplexNoise();\nexport default class Orb {\n  constructor(fill = 0x000000, originX, originY) {\n    this.bounds = this.setBounds(originX, originY);\n    this.x = utils.random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = utils.random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.scale = 1;\n    this.fill = fill;\n    this.radius = utils.random(window.innerHeight / 6, window.innerHeight / 3);\n    this.xOff = utils.random(0, 1000);\n    this.yOff = utils.random(0, 1000);\n    this.inc = 0.002;\n    this.graphics = new PIXI.Graphics();\n    this.graphics.alpha = 0.825;\n    window.addEventListener(\"resize\", debounce(() => {\n      this.bounds = this.setBounds();\n    }, 250));\n  }\n\n  setBounds(originX, originY) {\n    const maxDist = window.innerWidth < 1000 ? window.innerWidth / 3 : window.innerWidth / 5;\n    return {\n      x: {\n        min: originX - maxDist,\n        max: originX + maxDist\n      },\n      y: {\n        min: originY - maxDist,\n        max: originY + maxDist\n      }\n    };\n  }\n\n  update() {\n    console.log(\"ORBS UPDATE\");\n    const xNoise = simplex.noise2D(this.xOff, this.xOff);\n    const yNoise = simplex.noise2D(this.yOff, this.yOff);\n    const scaleNoise = simplex.noise2D(this.xOff, this.yOff);\n    this.x = utils.map(xNoise, -1, 1, this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = utils.map(yNoise, -1, 1, this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.scale = utils.map(scaleNoise, -1, 1, 0.5, 1);\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n\n  render() {\n    this.graphics.x = this.x;\n    this.graphics.y = this.y;\n    this.graphics.scale.set(this.scale);\n    this.graphics.clear();\n    this.graphics.beginFill(this.fill);\n    this.graphics.drawCircle(0, 0, this.radius);\n    this.graphics.endFill();\n  }\n\n}","map":{"version":3,"sources":["/home/maxime/personal_repos/sweet-portfolio/src/helpers/Orb.js"],"names":["PIXI","SimplexNoise","debounce","utils","simplex","Orb","constructor","fill","originX","originY","bounds","setBounds","x","random","min","max","y","scale","radius","window","innerHeight","xOff","yOff","inc","graphics","Graphics","alpha","addEventListener","maxDist","innerWidth","update","console","log","xNoise","noise2D","yNoise","scaleNoise","map","render","set","clear","beginFill","drawCircle","endFill"],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport SimplexNoise from \"simplex-noise\";\nimport { debounce } from \"debounce\";\nimport utils from \"./utils\";\n\nconst simplex = new SimplexNoise();\n\nexport default class Orb {\n  constructor(fill = 0x000000, originX, originY) {\n    this.bounds = this.setBounds(originX, originY);\n    this.x = utils.random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = utils.random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n\n    this.scale = 1;\n\n    this.fill = fill;\n\n    this.radius = utils.random(window.innerHeight / 6, window.innerHeight / 3);\n\n    this.xOff = utils.random(0, 1000);\n    this.yOff = utils.random(0, 1000);\n    this.inc = 0.002;\n\n    this.graphics = new PIXI.Graphics();\n    this.graphics.alpha = 0.825;\n\n    window.addEventListener(\n      \"resize\",\n      debounce(() => {\n        this.bounds = this.setBounds();\n      }, 250)\n    );\n  }\n\n  setBounds(originX, originY) {\n    const maxDist =\n      window.innerWidth < 1000 ? window.innerWidth / 3 : window.innerWidth / 5;\n\n    return {\n      x: {\n        min: originX - maxDist,\n        max: originX + maxDist,\n      },\n      y: {\n        min: originY - maxDist,\n        max: originY + maxDist,\n      },\n    };\n  }\n\n  update() {\n    console.log(\"ORBS UPDATE\");\n    const xNoise = simplex.noise2D(this.xOff, this.xOff);\n    const yNoise = simplex.noise2D(this.yOff, this.yOff);\n    const scaleNoise = simplex.noise2D(this.xOff, this.yOff);\n\n    this.x = utils.map(\n      xNoise,\n      -1,\n      1,\n      this.bounds[\"x\"].min,\n      this.bounds[\"x\"].max\n    );\n    this.y = utils.map(\n      yNoise,\n      -1,\n      1,\n      this.bounds[\"y\"].min,\n      this.bounds[\"y\"].max\n    );\n    this.scale = utils.map(scaleNoise, -1, 1, 0.5, 1);\n\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n\n  render() {\n    this.graphics.x = this.x;\n    this.graphics.y = this.y;\n    this.graphics.scale.set(this.scale);\n\n    this.graphics.clear();\n\n    this.graphics.beginFill(this.fill);\n    this.graphics.drawCircle(0, 0, this.radius);\n    this.graphics.endFill();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}