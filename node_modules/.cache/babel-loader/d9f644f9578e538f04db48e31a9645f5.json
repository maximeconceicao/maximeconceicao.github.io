{"ast":null,"code":"import SweetBackground from \"./components/SweetBackground.vue\";\nimport FlapText from \"./helpers/FlapText\";\nimport AppBase from \"./layout/AppBase.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    AppBase,\n    SweetBackground\n  },\n\n  mounted() {\n    this.$nextTick(() => {\n      const characters = \"\\\"'“”‘’¹²³!#$&%()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~½¼¡«»×▓▒░│┤▀└┴┬├─┼┐┌└┘\".split(\"\"); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n      const shuffledCharacters = characters.sort((a, b) => 0.5 - Math.random());\n\n      (function () {\n        const flapTextElements = [];\n        document.querySelectorAll(\".flap\").forEach(flapElement => {\n          const lines = flapElement.innerText.trimEnd().split(\"\\n\").map(line => line.trimEnd().replaceAll(\"\\t\", \"\"));\n          console.log(\"LINEs\", lines);\n          flapElement.innerHTML = \"\";\n          lines.forEach(line => {\n            const span = document.createElement(\"span\");\n            span.dataset.paused = \"true\";\n            flapElement.appendChild(span);\n            new IntersectionObserver(entries => {\n              if (entries[0].isIntersecting === true) {\n                span.dataset.paused = \"false\";\n              }\n            }, {\n              threshold: [0]\n            }).observe(span);\n            const flapText = new FlapText(span, shuffledCharacters);\n            flapText.setInitialPositions(line);\n            flapText.shufflePositions();\n            flapText.render();\n            span.addEventListener(\"mouseenter\", () => {\n              flapText.shufflePositions();\n            });\n            flapTextElements.push(flapText);\n          });\n        });\n        let frameCount = 0;\n        requestAnimationFrame(function animate() {\n          requestAnimationFrame(animate);\n\n          if (frameCount++ % 2 === 0) {\n            for (const flapText of flapTextElements) {\n              flapText.flap();\n              flapText.render();\n            }\n          }\n        });\n      })();\n    });\n  }\n\n};","map":{"version":3,"mappings":"AAMA,OAAOA,eAAP,MAA4B,kCAA5B;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,eAAe;AACbC,MAAI,EAAE,KADO;AAEbC,YAAU,EAAE;AAAEF,WAAF;AAAWF;AAAX,GAFC;;AAGbK,SAAO,GAAG;AACR,SAAKC,SAAL,CAAe,MAAM;AACnB,YAAMC,UAAS,GACb,gIAAgIC,KAAhI,CACE,EADF,CADF,CADmB,CAMnB;;AACA,YAAMC,kBAAiB,GAAIF,UAAU,CAACG,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAU,MAAMC,IAAI,CAACC,MAAL,EAAhC,CAA3B;;AAEA,OAAC,YAAY;AACX,cAAMC,gBAAe,GAAI,EAAzB;AAEAC,gBAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCC,OAAnC,CAA4CC,WAAD,IAAiB;AAC1D,gBAAMC,KAAI,GAAID,WAAW,CAACE,SAAZ,CACXC,OADW,GAEXd,KAFW,CAEL,IAFK,EAGXe,GAHW,CAGNC,IAAD,IAAUA,IAAI,CAACF,OAAL,GAAeG,UAAf,CAA0B,IAA1B,EAAgC,EAAhC,CAHH,CAAd;AAIAC,iBAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBP,KAArB;AACAD,qBAAW,CAACS,SAAZ,GAAwB,EAAxB;AAEAR,eAAK,CAACF,OAAN,CAAeM,IAAD,IAAU;AACtB,kBAAMK,IAAG,GAAIb,QAAQ,CAACc,aAAT,CAAuB,MAAvB,CAAb;AACAD,gBAAI,CAACE,OAAL,CAAaC,MAAb,GAAsB,MAAtB;AACAb,uBAAW,CAACc,WAAZ,CAAwBJ,IAAxB;AAEA,gBAAIK,oBAAJ,CACGC,OAAD,IAAa;AACX,kBAAIA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,KAA8B,IAAlC,EAAwC;AACtCP,oBAAI,CAACE,OAAL,CAAaC,MAAb,GAAsB,OAAtB;AACF;AACD,aALH,EAME;AAAEK,uBAAS,EAAE,CAAC,CAAD;AAAb,aANF,EAOEC,OAPF,CAOUT,IAPV;AASA,kBAAMU,QAAO,GAAI,IAAItC,QAAJ,CAAa4B,IAAb,EAAmBpB,kBAAnB,CAAjB;AACA8B,oBAAQ,CAACC,mBAAT,CAA6BhB,IAA7B;AACAe,oBAAQ,CAACE,gBAAT;AAEAF,oBAAQ,CAACG,MAAT;AAEAb,gBAAI,CAACc,gBAAL,CAAsB,YAAtB,EAAoC,MAAM;AACxCJ,sBAAQ,CAACE,gBAAT;AACD,aAFD;AAIA1B,4BAAgB,CAAC6B,IAAjB,CAAsBL,QAAtB;AACD,WAzBD;AA0BD,SAlCD;AAoCA,YAAIM,UAAS,GAAI,CAAjB;AACAC,6BAAqB,CAAC,SAASC,OAAT,GAAmB;AACvCD,+BAAqB,CAACC,OAAD,CAArB;;AACA,cAAIF,UAAU,KAAK,CAAf,KAAqB,CAAzB,EAA4B;AAC1B,iBAAK,MAAMN,QAAX,IAAuBxB,gBAAvB,EAAyC;AACvCwB,sBAAQ,CAACS,IAAT;AACAT,sBAAQ,CAACG,MAAT;AACF;AACF;AACD,SARoB,CAArB;AASD,OAjDD;AAkDD,KA3DD;AA4DD;;AAhEY,CAAf","names":["SweetBackground","FlapText","AppBase","name","components","mounted","$nextTick","characters","split","shuffledCharacters","sort","a","b","Math","random","flapTextElements","document","querySelectorAll","forEach","flapElement","lines","innerText","trimEnd","map","line","replaceAll","console","log","innerHTML","span","createElement","dataset","paused","appendChild","IntersectionObserver","entries","isIntersecting","threshold","observe","flapText","setInitialPositions","shufflePositions","render","addEventListener","push","frameCount","requestAnimationFrame","animate","flap"],"sourceRoot":"","sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/App.vue"],"sourcesContent":["<template>\n  <sweet-background />\n  <app-base />\n</template>\n\n<script>\nimport SweetBackground from \"./components/SweetBackground.vue\";\nimport FlapText from \"./helpers/FlapText\";\nimport AppBase from \"./layout/AppBase.vue\";\nexport default {\n  name: \"App\",\n  components: { AppBase, SweetBackground },\n  mounted() {\n    this.$nextTick(() => {\n      const characters =\n        \"\\\"'“”‘’¹²³!#$&%()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~½¼¡«»×▓▒░│┤▀└┴┬├─┼┐┌└┘\".split(\n          \"\"\n        );\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const shuffledCharacters = characters.sort((a, b) => 0.5 - Math.random());\n\n      (function () {\n        const flapTextElements = [];\n\n        document.querySelectorAll(\".flap\").forEach((flapElement) => {\n          const lines = flapElement.innerText\n            .trimEnd()\n            .split(\"\\n\")\n            .map((line) => line.trimEnd().replaceAll(\"\\t\", \"\"));\n          console.log(\"LINEs\", lines);\n          flapElement.innerHTML = \"\";\n\n          lines.forEach((line) => {\n            const span = document.createElement(\"span\");\n            span.dataset.paused = \"true\";\n            flapElement.appendChild(span);\n\n            new IntersectionObserver(\n              (entries) => {\n                if (entries[0].isIntersecting === true) {\n                  span.dataset.paused = \"false\";\n                }\n              },\n              { threshold: [0] }\n            ).observe(span);\n\n            const flapText = new FlapText(span, shuffledCharacters);\n            flapText.setInitialPositions(line);\n            flapText.shufflePositions();\n\n            flapText.render();\n\n            span.addEventListener(\"mouseenter\", () => {\n              flapText.shufflePositions();\n            });\n\n            flapTextElements.push(flapText);\n          });\n        });\n\n        let frameCount = 0;\n        requestAnimationFrame(function animate() {\n          requestAnimationFrame(animate);\n          if (frameCount++ % 2 === 0) {\n            for (const flapText of flapTextElements) {\n              flapText.flap();\n              flapText.render();\n            }\n          }\n        });\n      })();\n    });\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import \"./styles/style.scss\";\n</style>\n"]},"metadata":{},"sourceType":"module"}