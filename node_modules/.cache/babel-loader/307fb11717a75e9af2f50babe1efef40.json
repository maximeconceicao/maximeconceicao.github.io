{"ast":null,"code":"export default class FlapText {\n  constructor(element, alphabet) {\n    this.element = element;\n    this.alphabet = alphabet;\n    this.currentPositions = [];\n    this.targetPositions = [];\n    this.randomPositions = [];\n  }\n\n  setInitialPositions(text) {\n    const textArray = text.split(\"\");\n    const textLength = textArray.length;\n    textArray.forEach((char, index) => {\n      const charIndex = this.alphabet.indexOf(char);\n\n      if (charIndex === -1) {\n        this.alphabet.push(char);\n        this.targetPositions[index] = this.alphabet.length - 1;\n      } else {\n        this.targetPositions[index] = charIndex;\n      }\n    });\n    console.log(\"SET INITIAL POSITIONS\", this.targetPositions);\n    this.currentPositions = Array(textLength).fill(0);\n    this.randomPositions = Array(textLength).fill(0);\n  }\n\n  resetCurrentPositions() {\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] = this.targetPositions[i];\n    }\n\n    console.log(\"RESET CURRENT POSITIONS\", this.targetPositions);\n    console.log(\"RESET CURRENT POSITIONS\", this.currentPositions);\n    this.randomPositions.fill(0);\n  }\n\n  shufflePositions() {\n    const randomOffset = Math.floor(10 * Math.random()) + 5;\n\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] = (this.currentPositions[i] + this.alphabet.length - randomOffset) % this.alphabet.length;\n      this.randomPositions[i] = Math.floor(10 * Math.random());\n    }\n  }\n\n  shiftRandomly(offset, multiplier) {\n    for (let i = 0; i < this.randomPositions.length; i++) {\n      this.randomPositions[i] = offset + i * multiplier;\n    }\n  }\n\n  flap() {\n    if (this.element.dataset.paused !== \"false\") {\n      return;\n    } // if (this.randomPositions.every((pos) => pos === 0)) {\n    //   this.element.dataset.paused = true;\n    //   this.resetCurrentPositions();\n    //   return;\n    // }\n\n\n    if (this.currentPositions.every((pos, i) => pos === this.targetPositions[i])) {\n      this.paused = true;\n      return;\n    }\n\n    console.log(\"THIS RANDOM POSITIONS\", this.randomPositions);\n    this.currentPositions.forEach((position, index) => {\n      if (this.randomPositions[index] > 0) {\n        this.randomPositions[index]--;\n      } else if (this.currentPositions[index] !== this.targetPositions[index]) {\n        this.currentPositions[index] = (this.currentPositions[index] + 1) % this.alphabet.length;\n      }\n    });\n  }\n\n  render() {\n    console.log(\"RENDER\", this.currentPositions);\n    const newText = this.currentPositions.reduce((text, position) => {\n      console.log(\"POSITION\", this.alphabet[position]);\n      let char = this.alphabet[position]; //   if (char === \">\") {\n      //     char = \"&gt;\";\n      //   } else if (char === \"<\") {\n      //     char = \"&lt;\";\n      //   }\n\n      console.log(\"WTF\", text + char);\n      return text + char;\n    }, \"\");\n    console.log(\"NEW TEXT\", newText);\n\n    if (this.element.innerHTML !== newText) {\n      this.element.innerHTML = newText;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/helpers/FlapText.js"],"names":["FlapText","constructor","element","alphabet","currentPositions","targetPositions","randomPositions","setInitialPositions","text","textArray","split","textLength","length","forEach","char","index","charIndex","indexOf","push","console","log","Array","fill","resetCurrentPositions","i","shufflePositions","randomOffset","Math","floor","random","shiftRandomly","offset","multiplier","flap","dataset","paused","every","pos","position","render","newText","reduce","innerHTML"],"mappings":"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","sourcesContent":["export default class FlapText {\n  constructor(element, alphabet) {\n    this.element = element;\n    this.alphabet = alphabet;\n    this.currentPositions = [];\n    this.targetPositions = [];\n    this.randomPositions = [];\n  }\n\n  setInitialPositions(text) {\n    const textArray = text.split(\"\");\n    const textLength = textArray.length;\n    textArray.forEach((char, index) => {\n      const charIndex = this.alphabet.indexOf(char);\n      if (charIndex === -1) {\n        this.alphabet.push(char);\n        this.targetPositions[index] = this.alphabet.length - 1;\n      } else {\n        this.targetPositions[index] = charIndex;\n      }\n    });\n    console.log(\"SET INITIAL POSITIONS\", this.targetPositions);\n    this.currentPositions = Array(textLength).fill(0);\n    this.randomPositions = Array(textLength).fill(0);\n  }\n\n  resetCurrentPositions() {\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] = this.targetPositions[i];\n    }\n    console.log(\"RESET CURRENT POSITIONS\", this.targetPositions);\n    console.log(\"RESET CURRENT POSITIONS\", this.currentPositions);\n    this.randomPositions.fill(0);\n  }\n\n  shufflePositions() {\n    const randomOffset = Math.floor(10 * Math.random()) + 5;\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] =\n        (this.currentPositions[i] + this.alphabet.length - randomOffset) %\n        this.alphabet.length;\n      this.randomPositions[i] = Math.floor(10 * Math.random());\n    }\n  }\n\n  shiftRandomly(offset, multiplier) {\n    for (let i = 0; i < this.randomPositions.length; i++) {\n      this.randomPositions[i] = offset + i * multiplier;\n    }\n  }\n\n  flap() {\n    if (this.element.dataset.paused !== \"false\") {\n      return;\n    }\n    // if (this.randomPositions.every((pos) => pos === 0)) {\n    //   this.element.dataset.paused = true;\n    //   this.resetCurrentPositions();\n    //   return;\n    // }\n    if (\n      this.currentPositions.every((pos, i) => pos === this.targetPositions[i])\n    ) {\n      this.paused = true;\n      return;\n    }\n    console.log(\"THIS RANDOM POSITIONS\", this.randomPositions);\n    this.currentPositions.forEach((position, index) => {\n      if (this.randomPositions[index] > 0) {\n        this.randomPositions[index]--;\n      } else if (this.currentPositions[index] !== this.targetPositions[index]) {\n        this.currentPositions[index] =\n          (this.currentPositions[index] + 1) % this.alphabet.length;\n      }\n    });\n  }\n\n  render() {\n    console.log(\"RENDER\", this.currentPositions);\n    const newText = this.currentPositions.reduce((text, position) => {\n      console.log(\"POSITION\", this.alphabet[position]);\n      let char = this.alphabet[position];\n      //   if (char === \">\") {\n      //     char = \"&gt;\";\n      //   } else if (char === \"<\") {\n      //     char = \"&lt;\";\n      //   }\n      console.log(\"WTF\", text + char);\n      return text + char;\n    }, \"\");\n    console.log(\"NEW TEXT\", newText);\n    if (this.element.innerHTML !== newText) {\n      this.element.innerHTML = newText;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}