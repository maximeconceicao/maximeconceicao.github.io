{"ast":null,"code":"import { debounce } from \"debounce\";\nimport { random, map } from \"./utils\";\nexport default class Orb {\n  constructor(xPosInWidthPct, yPosInHeightPct, maxDistPct, fillColor) {\n    console.log(\"CONSTRUCT\", xPosInWidthPct * window.innerWidth);\n    this.xPosInWidthPct = xPosInWidthPct;\n    this.yPosInHeightPct = yPosInHeightPct;\n    this.maxDistPct = maxDistPct;\n    this.bounds = this.setBounds();\n    console.log(\"BOUNDS : \", this.bounds);\n    this.x = random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.radius = random(window.innerHeight / 6, window.innerHeight / 3);\n    this.xOff = random(0, 1000);\n    this.yOff = random(0, 1000);\n    this.inc = 0.002;\n    this.fillColor = fillColor;\n    window.addEventListener(\"resize\", debounce(() => {\n      this.bounds = this.setBounds();\n    }, 250));\n  }\n\n  setBounds() {\n    const maxDistX = window.innerWidth * this.maxDistPct;\n    const maxDistY = window.innerHeight * this.maxDistPct;\n    console.log(\"WTF : \", this.xPosInWidthPct * window.innerWidth);\n    console.log(\"XPOS : \", this.xPosInWidthPct);\n    console.log(\"maxDistX : \", maxDistX);\n    return {\n      x: {\n        min: this.xPosInWidthPct * window.innerWidth - maxDistX,\n        max: this.xPosInWidthPct * window.innerWidth + maxDistX\n      },\n      y: {\n        min: this.yPosInHeightPct * window.innerHeight - maxDistY,\n        max: this.yPosInHeightPct * window.innerHeight + maxDistY\n      }\n    };\n  }\n\n  move(sketchInstance) {\n    const xNoise = sketchInstance.noise(this.xOff, this.xOff);\n    const yNoise = sketchInstance.noise(this.yOff, this.yOff);\n    this.x = sketchInstance.map(xNoise, 0, 1, this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = sketchInstance.map(yNoise, 0, 1, this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n\n  render(sketchInstance) {\n    sketchInstance.fill(this.fillColor);\n    sketchInstance.ellipse(this.x, this.y, this.radius, this.radius);\n  }\n\n}","map":{"version":3,"sources":["/home/maxime/personal_repos/sweet-portfolio/src/helpers/Orb.js"],"names":["debounce","random","map","Orb","constructor","xPosInWidthPct","yPosInHeightPct","maxDistPct","fillColor","console","log","window","innerWidth","bounds","setBounds","x","min","max","y","radius","innerHeight","xOff","yOff","inc","addEventListener","maxDistX","maxDistY","move","sketchInstance","xNoise","noise","yNoise","render","fill","ellipse"],"mappings":"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","sourcesContent":["import { debounce } from \"debounce\";\nimport { random, map } from \"./utils\";\n\nexport default class Orb {\n  constructor(xPosInWidthPct, yPosInHeightPct, maxDistPct, fillColor) {\n    console.log(\"CONSTRUCT\", xPosInWidthPct * window.innerWidth);\n    this.xPosInWidthPct = xPosInWidthPct;\n    this.yPosInHeightPct = yPosInHeightPct;\n    this.maxDistPct = maxDistPct;\n\n    this.bounds = this.setBounds();\n    console.log(\"BOUNDS : \", this.bounds);\n    this.x = random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n\n    this.radius = random(window.innerHeight / 6, window.innerHeight / 3);\n\n    this.xOff = random(0, 1000);\n    this.yOff = random(0, 1000);\n    this.inc = 0.002;\n\n    this.fillColor = fillColor;\n    window.addEventListener(\n      \"resize\",\n      debounce(() => {\n        this.bounds = this.setBounds();\n      }, 250)\n    );\n  }\n\n  setBounds() {\n    const maxDistX = window.innerWidth * this.maxDistPct;\n    const maxDistY = window.innerHeight * this.maxDistPct;\n\n    console.log(\"WTF : \", this.xPosInWidthPct * window.innerWidth);\n    console.log(\"XPOS : \", this.xPosInWidthPct);\n    console.log(\"maxDistX : \", maxDistX);\n\n    return {\n      x: {\n        min: this.xPosInWidthPct * window.innerWidth - maxDistX,\n        max: this.xPosInWidthPct * window.innerWidth + maxDistX,\n      },\n      y: {\n        min: this.yPosInHeightPct * window.innerHeight - maxDistY,\n        max: this.yPosInHeightPct * window.innerHeight + maxDistY,\n      },\n    };\n  }\n\n  move(sketchInstance) {\n    const xNoise = sketchInstance.noise(this.xOff, this.xOff);\n    const yNoise = sketchInstance.noise(this.yOff, this.yOff);\n\n    this.x = sketchInstance.map(\n      xNoise,\n      0,\n      1,\n      this.bounds[\"x\"].min,\n      this.bounds[\"x\"].max\n    );\n    this.y = sketchInstance.map(\n      yNoise,\n      0,\n      1,\n      this.bounds[\"y\"].min,\n      this.bounds[\"y\"].max\n    );\n\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n\n  render(sketchInstance) {\n    sketchInstance.fill(this.fillColor);\n    sketchInstance.ellipse(this.x, this.y, this.radius, this.radius);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}