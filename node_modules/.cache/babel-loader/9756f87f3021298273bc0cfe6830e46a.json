{"ast":null,"code":"import { debounce } from \"debounce\";\nimport { random, map } from \"./utils\";\nexport default class Orb {\n  constructor(originX, originY, maxDist, fillColor) {\n    console.log(\"CONSTRUCT\");\n    this.bounds = this.setBounds(originX, originY);\n    this.maxDist = maxDist;\n    this.x = random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.scale = 1;\n    this.radius = random(window.innerHeight / 6, window.innerHeight / 3);\n    this.xOff = random(0, 1000);\n    this.yOff = random(0, 1000);\n    this.inc = 0.002;\n    this.fillColor = fillColor;\n    window.addEventListener(\"resize\", debounce(() => {\n      this.bounds = this.setBounds(this.x, this.y);\n    }, 250));\n  }\n\n  setBounds(originX, originY) {\n    console.log(\"SET BOUNDS\", originX, this.x);\n    const maxDistX = window.innerWidth * this.maxDist;\n    const maxDistY = window.innerWidth * this.maxDist;\n    return {\n      x: {\n        min: originX - maxDist,\n        max: originX + maxDist\n      },\n      y: {\n        min: originY - maxDist,\n        max: originY + maxDist\n      }\n    };\n  }\n\n  move(sketchInstance) {\n    const xNoise = sketchInstance.noise(this.xOff, this.xOff);\n    const yNoise = sketchInstance.noise(this.yOff, this.yOff);\n    const scaleNoise = sketchInstance.noise(this.xOff, this.yOff);\n    this.x = map(xNoise, -1, 1, this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = map(yNoise, -1, 1, this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.scale = map(scaleNoise, -1, 1, 0.5, 1);\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n\n  render(sketchInstance) {\n    sketchInstance.fill(this.fillColor);\n    sketchInstance.ellipse(this.x, this.y, this.radius, this.radius);\n  }\n\n}","map":{"version":3,"sources":["/home/maxime/personal_repos/sweet-portfolio/src/helpers/Orb.js"],"names":["debounce","random","map","Orb","constructor","originX","originY","maxDist","fillColor","console","log","bounds","setBounds","x","min","max","y","scale","radius","window","innerHeight","xOff","yOff","inc","addEventListener","maxDistX","innerWidth","maxDistY","move","sketchInstance","xNoise","noise","yNoise","scaleNoise","render","fill","ellipse"],"mappings":"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","sourcesContent":["import { debounce } from \"debounce\";\nimport { random, map } from \"./utils\";\n\nexport default class Orb {\n  constructor(originX, originY, maxDist, fillColor) {\n    console.log(\"CONSTRUCT\");\n    this.bounds = this.setBounds(originX, originY);\n    this.maxDist = maxDist;\n    this.x = random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n\n    this.scale = 1;\n\n    this.radius = random(window.innerHeight / 6, window.innerHeight / 3);\n\n    this.xOff = random(0, 1000);\n    this.yOff = random(0, 1000);\n    this.inc = 0.002;\n\n    this.fillColor = fillColor;\n    window.addEventListener(\n      \"resize\",\n      debounce(() => {\n        this.bounds = this.setBounds(this.x, this.y);\n      }, 250)\n    );\n  }\n\n  setBounds(originX, originY) {\n    console.log(\"SET BOUNDS\", originX, this.x);\n    const maxDistX = window.innerWidth * this.maxDist;\n    const maxDistY = window.innerWidth * this.maxDist;\n\n    return {\n      x: {\n        min: originX - maxDist,\n        max: originX + maxDist,\n      },\n      y: {\n        min: originY - maxDist,\n        max: originY + maxDist,\n      },\n    };\n  }\n\n  move(sketchInstance) {\n    const xNoise = sketchInstance.noise(this.xOff, this.xOff);\n    const yNoise = sketchInstance.noise(this.yOff, this.yOff);\n    const scaleNoise = sketchInstance.noise(this.xOff, this.yOff);\n\n    this.x = map(xNoise, -1, 1, this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = map(yNoise, -1, 1, this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.scale = map(scaleNoise, -1, 1, 0.5, 1);\n\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n\n  render(sketchInstance) {\n    sketchInstance.fill(this.fillColor);\n    sketchInstance.ellipse(this.x, this.y, this.radius, this.radius);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}