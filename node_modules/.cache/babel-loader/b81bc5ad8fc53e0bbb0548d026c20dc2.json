{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from '../assets/me.png';\nconst _hoisted_1 = {\n  id: \"main-content\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"canvas\", {\n  class: \"orb-canvas\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"hero\\\"><div class=\\\"hero__avatar\\\"><img src=\\\"\" + _imports_0 + \"\\\" alt=\\\"\\\" class=\\\"hero__avatar-me\\\"></div><div class=\\\"hero__text\\\"><h1>Hi I&#39;m Max</h1><h2>And I try my best</h2><div class=\\\"hero__buttons\\\"><a href=\\\"\\\" class=\\\"btn\\\">About Me</a><a href=\\\"\\\" class=\\\"btn btn--secondary\\\">Projects</a></div><div class=\\\"hero__buttons\\\"><a href=\\\"\\\" class=\\\"btn\\\">Play a game</a></div></div></div>\", 1);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"main\", _hoisted_1, [_createCommentVNode(\" Canvas \"), _hoisted_2, _createCommentVNode(\" Overlay \"), _hoisted_3]);\n}","map":{"version":3,"mappings":";OAOaA,gBAAsB;;AAN3BC,IAAE,EAAC;;;gCAEPC,oBAAoC,QAApC,EAAoC;AAA5BC,OAAK,EAAC;AAAsB,CAApC,EAA0B,IAA1B,EAA0B;AAAA;AAA1B;;;;;uBAFFC,oBAoBO,MApBP,cAoBO,CAnBLC,+BAmBK,EAlBLC,UAkBK,EAjBLD,gCAiBK,EAhBLE,UAgBK,CApBP","names":["_imports_0","id","_createElementVNode","class","_createElementBlock","_createCommentVNode","_hoisted_2","_hoisted_3"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/components/SweetHomepage.vue"],"sourcesContent":["<template>\n  <main id=\"main-content\">\n    <!-- Canvas -->\n    <canvas class=\"orb-canvas\"></canvas>\n    <!-- Overlay -->\n    <div class=\"hero\">\n      <div class=\"hero__avatar\">\n        <img src=\"../assets/me.png\" alt=\"\" class=\"hero__avatar-me\" />\n      </div>\n      <div class=\"hero__text\">\n        <h1>Hi I'm Max</h1>\n        <h2>And I try my best</h2>\n        <div class=\"hero__buttons\">\n          <a href=\"\" class=\"btn\">About Me</a>\n          <a href=\"\" class=\"btn btn--secondary\">Projects</a>\n        </div>\n        <div class=\"hero__buttons\">\n          <a href=\"\" class=\"btn\">Play a game</a>\n        </div>\n      </div>\n    </div>\n  </main>\n</template>\n\n<script>\nimport * as PIXI from \"pixi.js\";\nimport Orb from \"../helpers/Orb\";\nimport { KawaseBlurFilter } from \"@pixi/filter-kawase-blur\";\n\nexport default {\n  name: \"SweetHomepage\",\n  components: {},\n  mounted() {\n    // Create PixiJS app\n    const app = new PIXI.Application({\n      // render to <canvas class=\"orb-canvas\"></canvas>\n      view: document.querySelector(\".orb-canvas\"),\n      // auto adjust size to fit the current window\n      resizeTo: window,\n      // transparent background, we will be creating a gradient background later using CSS\n      backgroundAlpha: 0,\n    });\n\n    app.stage.filters = [new KawaseBlurFilter(30, 20, true)];\n\n    // Create orbs\n    const orbs = [];\n\n    let originX = window.innerWidth / 1.25;\n    let originY =\n      window.innerWidth < 1000\n        ? window.innerHeight\n        : window.innerHeight / 1.375;\n\n    for (let i = 0; i < 10; i++) {\n      // each orb will be black, just for now\n      const orb = new Orb(0xff0000, originX, originY);\n      app.stage.addChild(orb.graphics);\n\n      orbs.push(orb);\n    }\n\n    originX = window.innerWidth * 0.2;\n    originY = window.innerWidth < 1000 ? 0 : window.innerHeight * 0.275;\n\n    for (let i = 0; i < 10; i++) {\n      // each orb will be black, just for now\n      const orb = new Orb(0x0000ff, originX, originY);\n      app.stage.addChild(orb.graphics);\n\n      orbs.push(orb);\n    }\n\n    if (!window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches) {\n      app.ticker.add(() => {\n        // update and render each orb, each frame. app.ticker attempts to run at 60fps\n        orbs.forEach((orb) => {\n          orb.update();\n          orb.render();\n        });\n      });\n    } else {\n      // perform one update and render per orb, do not animate\n      orbs.forEach((orb) => {\n        orb.update();\n        orb.render();\n      });\n    }\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}