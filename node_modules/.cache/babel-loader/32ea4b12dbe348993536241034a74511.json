{"ast":null,"code":"import { onMounted, onUpdated, ref } from \"vue\";\nimport SweetGameCell from \"@/components/SweetGameCell.vue\";\nexport default {\n  name: \"SweetGameCells\",\n  components: {\n    SweetGameCell\n  },\n  props: [\"sequenceToFind\"],\n\n  setup(props) {\n    let playerSequence = ref(null);\n\n    function resetPlayerSequence() {\n      playerSequence.value = Array.apply(null, Array(props.sequenceToFind.length)).map(() => {\n        return {};\n      });\n    }\n\n    onMounted(() => {\n      console.log(\"GAME CELLS : \", playerSequence, props.sequenceToFind.length);\n\n      for (const cell in playerSequence) {\n        console.log(\"hello\");\n      }\n    });\n    onUpdated(() => {\n      console.log(\"GAME CELLS : \", playerSequence, props.sequenceToFind.length);\n      resetPlayerSequence();\n\n      for (const cell in playerSequence) {\n        console.log(\"hello\");\n      }\n    });\n    return {\n      playerSequence\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAWA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,GAA/B,QAA0C,KAA1C;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AAEA,eAAe;AACbC,MAAI,EAAE,gBADO;AAEbC,YAAU,EAAE;AAAEF;AAAF,GAFC;AAGbG,OAAK,EAAE,CAAC,gBAAD,CAHM;;AAIbC,OAAK,CAACD,KAAD,EAAQ;AACX,QAAIE,cAAa,GAAIN,GAAG,CAAC,IAAD,CAAxB;;AAEA,aAASO,mBAAT,GAA+B;AAC7BD,oBAAc,CAACE,KAAf,GAAuBC,KAAK,CAACC,KAAN,CACrB,IADqB,EAErBD,KAAK,CAACL,KAAK,CAACO,cAAN,CAAqBC,MAAtB,CAFgB,EAGrBC,GAHqB,CAGjB,MAAM;AACV,eAAO,EAAP;AACD,OALsB,CAAvB;AAMF;;AAEAf,aAAS,CAAC,MAAM;AACdgB,aAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,cAA7B,EAA6CF,KAAK,CAACO,cAAN,CAAqBC,MAAlE;;AACA,WAAK,MAAMI,IAAX,IAAmBV,cAAnB,EAAmC;AACjCQ,eAAO,CAACC,GAAR,CAAY,OAAZ;AACF;AACD,KALQ,CAAT;AAOAhB,aAAS,CAAC,MAAM;AACde,aAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,cAA7B,EAA6CF,KAAK,CAACO,cAAN,CAAqBC,MAAlE;AACAL,yBAAmB;;AAEnB,WAAK,MAAMS,IAAX,IAAmBV,cAAnB,EAAmC;AACjCQ,eAAO,CAACC,GAAR,CAAY,OAAZ;AACF;AACD,KAPQ,CAAT;AASA,WAAO;AAAET;AAAF,KAAP;AACD;;AAjCY,CAAf","names":["onMounted","onUpdated","ref","SweetGameCell","name","components","props","setup","playerSequence","resetPlayerSequence","value","Array","apply","sequenceToFind","length","map","console","log","cell"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/components/SweetGameCells.vue"],"sourcesContent":["<template>\n  <div class=\"game-cells\">\n    <sweet-game-cell\n      v-for=\"(shape, index) in playerSequence\"\n      :key=\"index\"\n      :shape=\"shape\"\n    />\n  </div>\n</template>\n\n<script>\nimport { onMounted, onUpdated, ref } from \"vue\";\nimport SweetGameCell from \"@/components/SweetGameCell.vue\";\n\nexport default {\n  name: \"SweetGameCells\",\n  components: { SweetGameCell },\n  props: [\"sequenceToFind\"],\n  setup(props) {\n    let playerSequence = ref(null);\n\n    function resetPlayerSequence() {\n      playerSequence.value = Array.apply(\n        null,\n        Array(props.sequenceToFind.length)\n      ).map(() => {\n        return {};\n      });\n    }\n\n    onMounted(() => {\n      console.log(\"GAME CELLS : \", playerSequence, props.sequenceToFind.length);\n      for (const cell in playerSequence) {\n        console.log(\"hello\");\n      }\n    });\n\n    onUpdated(() => {\n      console.log(\"GAME CELLS : \", playerSequence, props.sequenceToFind.length);\n      resetPlayerSequence();\n\n      for (const cell in playerSequence) {\n        console.log(\"hello\");\n      }\n    });\n\n    return { playerSequence };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}