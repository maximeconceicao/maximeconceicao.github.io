{"ast":null,"code":"import { onMounted, ref } from \"vue\";\nexport default {\n  name: \"SweetGameTimer\",\n  props: [\"shape\"],\n\n  setup(props) {\n    const minutesLeft = ref(0);\n    const secondsLeft = ref(0);\n    let countDownDate = new Date().getTime() + 60000; // Update the count down every 1 second\n\n    var x = setInterval(function () {\n      // Get today's date and time\n      var now = new Date().getTime(); // Find the distance between now and the count down date\n\n      var distance = countDownDate - now; // Time calculations for days, hours, minutes and seconds\n\n      var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      var hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n      var minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n      var seconds = Math.floor(distance % (1000 * 60) / 1000);\n      minutesLeft.value = minutes;\n      secondsLeft.value = seconds; // If the count down is finished, write some text\n\n      if (distance < 0) {\n        clearInterval(x);\n        document.getElementById(\"demo\").innerHTML = \"EXPIRED\";\n      }\n    }, 1000);\n    onMounted(() => {\n      console.log(\"SHAPE : \", props.shape);\n    });\n    return {\n      time\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAOA,SAASA,SAAT,EAAoBC,GAApB,QAA+B,KAA/B;AAEA,eAAe;AACbC,MAAI,EAAE,gBADO;AAEbC,OAAK,EAAE,CAAC,OAAD,CAFM;;AAGbC,OAAK,CAACD,KAAD,EAAQ;AACX,UAAME,WAAU,GAAIJ,GAAG,CAAC,CAAD,CAAvB;AACA,UAAMK,WAAU,GAAIL,GAAG,CAAC,CAAD,CAAvB;AAEA,QAAIM,aAAY,GAAI,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,KAA3C,CAJW,CAMX;;AACA,QAAIC,IAAIC,WAAW,CAAC,YAAY;AAC9B;AACA,UAAIC,GAAE,GAAI,IAAIJ,IAAJ,GAAWC,OAAX,EAAV,CAF8B,CAI9B;;AACA,UAAII,QAAO,GAAIN,aAAY,GAAIK,GAA/B,CAL8B,CAO9B;;AACA,UAAIE,IAAG,GAAIC,IAAI,CAACC,KAAL,CAAWH,QAAO,IAAK,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAtB,CAAlB,CAAX;AACA,UAAII,KAAI,GAAIF,IAAI,CAACC,KAAL,CACTH,QAAO,IAAK,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAtB,CAAR,IAAsC,OAAO,EAAP,GAAY,EAAlD,CADU,CAAZ;AAGA,UAAIK,OAAM,GAAIH,IAAI,CAACC,KAAL,CAAYH,QAAO,IAAK,OAAO,EAAP,GAAY,EAAjB,CAAR,IAAiC,OAAO,EAAxC,CAAX,CAAd;AACA,UAAIM,OAAM,GAAIJ,IAAI,CAACC,KAAL,CAAYH,QAAO,IAAK,OAAO,EAAZ,CAAR,GAA2B,IAAtC,CAAd;AAEAR,iBAAW,CAACe,KAAZ,GAAoBF,OAApB;AACAZ,iBAAW,CAACc,KAAZ,GAAoBD,OAApB,CAhB8B,CAkB9B;;AACA,UAAIN,QAAO,GAAI,CAAf,EAAkB;AAChBQ,qBAAa,CAACX,CAAD,CAAb;AACAY,gBAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,SAAhC,GAA4C,SAA5C;AACF;AACD,KAvBkB,EAuBhB,IAvBgB,CAAnB;AAwBAxB,aAAS,CAAC,MAAM;AACdyB,aAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBvB,KAAK,CAACwB,KAA9B;AACD,KAFQ,CAAT;AAIA,WAAO;AAAEC;AAAF,KAAP;AACD;;AAvCY,CAAf","names":["onMounted","ref","name","props","setup","minutesLeft","secondsLeft","countDownDate","Date","getTime","x","setInterval","now","distance","days","Math","floor","hours","minutes","seconds","value","clearInterval","document","getElementById","innerHTML","console","log","shape","time"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/components/SweetGameTimer.vue"],"sourcesContent":["<template>\n  <div class=\"game-timer\">\n    <p>{{ time }} s</p>\n  </div>\n</template>\n\n<script>\nimport { onMounted, ref } from \"vue\";\n\nexport default {\n  name: \"SweetGameTimer\",\n  props: [\"shape\"],\n  setup(props) {\n    const minutesLeft = ref(0);\n    const secondsLeft = ref(0);\n\n    let countDownDate = new Date().getTime() + 60000;\n\n    // Update the count down every 1 second\n    var x = setInterval(function () {\n      // Get today's date and time\n      var now = new Date().getTime();\n\n      // Find the distance between now and the count down date\n      var distance = countDownDate - now;\n\n      // Time calculations for days, hours, minutes and seconds\n      var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      var hours = Math.floor(\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      var seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n      minutesLeft.value = minutes;\n      secondsLeft.value = seconds;\n\n      // If the count down is finished, write some text\n      if (distance < 0) {\n        clearInterval(x);\n        document.getElementById(\"demo\").innerHTML = \"EXPIRED\";\n      }\n    }, 1000);\n    onMounted(() => {\n      console.log(\"SHAPE : \", props.shape);\n    });\n\n    return { time };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}