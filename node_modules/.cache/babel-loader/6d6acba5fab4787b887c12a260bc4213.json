{"ast":null,"code":"export default class FlapText {\n  constructor(element, alphabet) {\n    this.element = element;\n    this.alphabet = alphabet;\n    this.currentPositions = [];\n    this.targetPositions = [];\n    this.randomPositions = [];\n  }\n\n  setInitialPositions(text) {\n    const textArray = text.split(\"\"); // const textLength = textArray.length;\n    // textArray.forEach((char, index) => {\n    //   const charIndex = this.alphabet.indexOf(char);\n    //   if (charIndex === -1) {\n    //     this.alphabet.push(char);\n    //     this.targetPositions[index] = this.alphabet.length - 1;\n    //   } else {\n    //     this.targetPositions[index] = charIndex;\n    //   }\n    // });\n\n    this.targetPositions = textArray;\n    this.currentPositions = Array(textLength).fill(0);\n    this.randomPositions = Array(textLength).fill(0);\n  }\n\n  resetCurrentPositions() {\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] = this.targetPositions[i];\n    }\n\n    this.randomPositions.fill(0);\n  }\n\n  shufflePositions() {\n    const randomOffset = Math.floor(10 * Math.random()) + 5;\n\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] = (this.currentPositions[i] + this.alphabet.length - randomOffset) % this.alphabet.length;\n      this.randomPositions[i] = Math.floor(10 * Math.random());\n    }\n  }\n\n  shiftRandomly(offset, multiplier) {\n    for (let i = 0; i < this.randomPositions.length; i++) {\n      this.randomPositions[i] = offset + i * multiplier;\n    }\n  }\n\n  flap() {\n    if (this.element.dataset.paused !== \"false\") {\n      return;\n    }\n\n    console.log(\"THIS RANDOM POSITIONS\", this.randomPositions);\n    this.currentPositions.forEach((position, index) => {\n      if (this.randomPositions[index] > 0) {\n        this.randomPositions[index]--;\n      } else if (this.currentPositions[index] !== this.targetPositions[index]) {\n        this.currentPositions[index] = (this.currentPositions[index] + 1) % this.alphabet.length;\n      }\n    });\n  }\n\n  render() {\n    console.log(\"RENDER\", this.currentPositions);\n    const newText = this.currentPositions.reduce((text, position) => {\n      let char = this.alphabet[position];\n\n      if (char === \">\") {\n        char = \"&gt;\";\n      } else if (char === \"<\") {\n        char = \"&lt;\";\n      }\n\n      return text + char;\n    }, \"\");\n\n    if (this.element.innerHTML !== newText) {\n      this.element.innerHTML = newText;\n      console.log(\"NEW TEXT\", newText);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/helpers/FlapText.js"],"names":["FlapText","constructor","element","alphabet","currentPositions","targetPositions","randomPositions","setInitialPositions","text","textArray","split","Array","textLength","fill","resetCurrentPositions","i","length","shufflePositions","randomOffset","Math","floor","random","shiftRandomly","offset","multiplier","flap","dataset","paused","console","log","forEach","position","index","render","newText","reduce","char","innerHTML"],"mappings":"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","sourcesContent":["export default class FlapText {\n  constructor(element, alphabet) {\n    this.element = element;\n    this.alphabet = alphabet;\n    this.currentPositions = [];\n    this.targetPositions = [];\n    this.randomPositions = [];\n  }\n\n  setInitialPositions(text) {\n    const textArray = text.split(\"\");\n    // const textLength = textArray.length;\n    // textArray.forEach((char, index) => {\n    //   const charIndex = this.alphabet.indexOf(char);\n    //   if (charIndex === -1) {\n    //     this.alphabet.push(char);\n    //     this.targetPositions[index] = this.alphabet.length - 1;\n    //   } else {\n    //     this.targetPositions[index] = charIndex;\n    //   }\n    // });\n    this.targetPositions = textArray;\n    this.currentPositions = Array(textLength).fill(0);\n    this.randomPositions = Array(textLength).fill(0);\n  }\n\n  resetCurrentPositions() {\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] = this.targetPositions[i];\n    }\n    this.randomPositions.fill(0);\n  }\n\n  shufflePositions() {\n    const randomOffset = Math.floor(10 * Math.random()) + 5;\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] =\n        (this.currentPositions[i] + this.alphabet.length - randomOffset) %\n        this.alphabet.length;\n      this.randomPositions[i] = Math.floor(10 * Math.random());\n    }\n  }\n\n  shiftRandomly(offset, multiplier) {\n    for (let i = 0; i < this.randomPositions.length; i++) {\n      this.randomPositions[i] = offset + i * multiplier;\n    }\n  }\n\n  flap() {\n    if (this.element.dataset.paused !== \"false\") {\n      return;\n    }\n\n    console.log(\"THIS RANDOM POSITIONS\", this.randomPositions);\n    this.currentPositions.forEach((position, index) => {\n      if (this.randomPositions[index] > 0) {\n        this.randomPositions[index]--;\n      } else if (this.currentPositions[index] !== this.targetPositions[index]) {\n        this.currentPositions[index] =\n          (this.currentPositions[index] + 1) % this.alphabet.length;\n      }\n    });\n  }\n\n  render() {\n    console.log(\"RENDER\", this.currentPositions);\n    const newText = this.currentPositions.reduce((text, position) => {\n      let char = this.alphabet[position];\n      if (char === \">\") {\n        char = \"&gt;\";\n      } else if (char === \"<\") {\n        char = \"&lt;\";\n      }\n      return text + char;\n    }, \"\");\n    if (this.element.innerHTML !== newText) {\n      this.element.innerHTML = newText;\n      console.log(\"NEW TEXT\", newText);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}