{"ast":null,"code":"import { debounce } from \"debounce\";\nimport { random } from \"./utils\";\nexport default class Orb {\n  constructor(xPosInWidthPct, yPosInHeightPct, maxDistPct, fillColor) {\n    this.xPosInWidthPct = xPosInWidthPct;\n    this.yPosInHeightPct = yPosInHeightPct;\n    this.maxDistPct = maxDistPct;\n    this.bounds = this.setBounds();\n    this.x = random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.radius = random(window.innerHeight / 6, window.innerHeight / 2);\n    this.xOff = random(0, 1000);\n    this.yOff = random(0, 1000);\n    this.inc = 0.002;\n    this.fillColor = fillColor;\n    window.addEventListener(\"resize\", debounce(() => {\n      this.bounds = this.setBounds();\n    }, 250));\n  }\n  setBounds() {\n    const maxDistX = window.innerWidth * this.maxDistPct;\n    const maxDistY = window.innerHeight * this.maxDistPct;\n    return {\n      x: {\n        min: this.xPosInWidthPct * window.innerWidth - maxDistX,\n        max: this.xPosInWidthPct * window.innerWidth + maxDistX\n      },\n      y: {\n        min: this.yPosInHeightPct * window.innerHeight - maxDistY,\n        max: this.yPosInHeightPct * window.innerHeight + maxDistY\n      }\n    };\n  }\n  move(sketchInstance) {\n    const xNoise = sketchInstance.noise(this.xOff, this.xOff);\n    const yNoise = sketchInstance.noise(this.yOff, this.yOff);\n    this.x = sketchInstance.map(xNoise, 0, 1, this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = sketchInstance.map(yNoise, 0, 1, this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n  render(sketchInstance) {\n    sketchInstance.fill(this.fillColor);\n    sketchInstance.ellipse(this.x, this.y, this.radius, this.radius);\n  }\n}","map":{"version":3,"names":["debounce","random","Orb","constructor","xPosInWidthPct","yPosInHeightPct","maxDistPct","fillColor","bounds","setBounds","x","min","max","y","radius","window","innerHeight","xOff","yOff","inc","addEventListener","maxDistX","innerWidth","maxDistY","move","sketchInstance","xNoise","noise","yNoise","map","render","fill","ellipse"],"sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/helpers/Orb.js"],"sourcesContent":["import { debounce } from \"debounce\";\nimport { random } from \"./utils\";\n\nexport default class Orb {\n  constructor(xPosInWidthPct, yPosInHeightPct, maxDistPct, fillColor) {\n    this.xPosInWidthPct = xPosInWidthPct;\n    this.yPosInHeightPct = yPosInHeightPct;\n    this.maxDistPct = maxDistPct;\n\n    this.bounds = this.setBounds();\n    this.x = random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n    this.y = random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n\n    this.radius = random(window.innerHeight / 6, window.innerHeight / 2);\n\n    this.xOff = random(0, 1000);\n    this.yOff = random(0, 1000);\n    this.inc = 0.002;\n\n    this.fillColor = fillColor;\n    window.addEventListener(\n      \"resize\",\n      debounce(() => {\n        this.bounds = this.setBounds();\n      }, 250)\n    );\n  }\n\n  setBounds() {\n    const maxDistX = window.innerWidth * this.maxDistPct;\n    const maxDistY = window.innerHeight * this.maxDistPct;\n\n    return {\n      x: {\n        min: this.xPosInWidthPct * window.innerWidth - maxDistX,\n        max: this.xPosInWidthPct * window.innerWidth + maxDistX,\n      },\n      y: {\n        min: this.yPosInHeightPct * window.innerHeight - maxDistY,\n        max: this.yPosInHeightPct * window.innerHeight + maxDistY,\n      },\n    };\n  }\n\n  move(sketchInstance) {\n    const xNoise = sketchInstance.noise(this.xOff, this.xOff);\n    const yNoise = sketchInstance.noise(this.yOff, this.yOff);\n\n    this.x = sketchInstance.map(\n      xNoise,\n      0,\n      1,\n      this.bounds[\"x\"].min,\n      this.bounds[\"x\"].max\n    );\n    this.y = sketchInstance.map(\n      yNoise,\n      0,\n      1,\n      this.bounds[\"y\"].min,\n      this.bounds[\"y\"].max\n    );\n\n    this.xOff += this.inc;\n    this.yOff += this.inc;\n  }\n\n  render(sketchInstance) {\n    sketchInstance.fill(this.fillColor);\n    sketchInstance.ellipse(this.x, this.y, this.radius, this.radius);\n  }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,UAAU;AACnC,SAASC,MAAM,QAAQ,SAAS;AAEhC,eAAe,MAAMC,GAAG,CAAC;EACvBC,WAAWA,CAACC,cAAc,EAAEC,eAAe,EAAEC,UAAU,EAAEC,SAAS,EAAE;IAClE,IAAI,CAACH,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,UAAU,GAAGA,UAAU;IAE5B,IAAI,CAACE,MAAM,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC;IAC9B,IAAI,CAACC,CAAC,GAAGT,MAAM,CAAC,IAAI,CAACO,MAAM,CAAC,GAAG,CAAC,CAACG,GAAG,EAAE,IAAI,CAACH,MAAM,CAAC,GAAG,CAAC,CAACI,GAAG,CAAC;IAC3D,IAAI,CAACC,CAAC,GAAGZ,MAAM,CAAC,IAAI,CAACO,MAAM,CAAC,GAAG,CAAC,CAACG,GAAG,EAAE,IAAI,CAACH,MAAM,CAAC,GAAG,CAAC,CAACI,GAAG,CAAC;IAE3D,IAAI,CAACE,MAAM,GAAGb,MAAM,CAACc,MAAM,CAACC,WAAW,GAAG,CAAC,EAAED,MAAM,CAACC,WAAW,GAAG,CAAC,CAAC;IAEpE,IAAI,CAACC,IAAI,GAAGhB,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC;IAC3B,IAAI,CAACiB,IAAI,GAAGjB,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC;IAC3B,IAAI,CAACkB,GAAG,GAAG,KAAK;IAEhB,IAAI,CAACZ,SAAS,GAAGA,SAAS;IAC1BQ,MAAM,CAACK,gBAAgB,CACrB,QAAQ,EACRpB,QAAQ,CAAC,MAAM;MACb,IAAI,CAACQ,MAAM,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC;IAChC,CAAC,EAAE,GAAG,CACR,CAAC;EACH;EAEAA,SAASA,CAAA,EAAG;IACV,MAAMY,QAAQ,GAAGN,MAAM,CAACO,UAAU,GAAG,IAAI,CAAChB,UAAU;IACpD,MAAMiB,QAAQ,GAAGR,MAAM,CAACC,WAAW,GAAG,IAAI,CAACV,UAAU;IAErD,OAAO;MACLI,CAAC,EAAE;QACDC,GAAG,EAAE,IAAI,CAACP,cAAc,GAAGW,MAAM,CAACO,UAAU,GAAGD,QAAQ;QACvDT,GAAG,EAAE,IAAI,CAACR,cAAc,GAAGW,MAAM,CAACO,UAAU,GAAGD;MACjD,CAAC;MACDR,CAAC,EAAE;QACDF,GAAG,EAAE,IAAI,CAACN,eAAe,GAAGU,MAAM,CAACC,WAAW,GAAGO,QAAQ;QACzDX,GAAG,EAAE,IAAI,CAACP,eAAe,GAAGU,MAAM,CAACC,WAAW,GAAGO;MACnD;IACF,CAAC;EACH;EAEAC,IAAIA,CAACC,cAAc,EAAE;IACnB,MAAMC,MAAM,GAAGD,cAAc,CAACE,KAAK,CAAC,IAAI,CAACV,IAAI,EAAE,IAAI,CAACA,IAAI,CAAC;IACzD,MAAMW,MAAM,GAAGH,cAAc,CAACE,KAAK,CAAC,IAAI,CAACT,IAAI,EAAE,IAAI,CAACA,IAAI,CAAC;IAEzD,IAAI,CAACR,CAAC,GAAGe,cAAc,CAACI,GAAG,CACzBH,MAAM,EACN,CAAC,EACD,CAAC,EACD,IAAI,CAAClB,MAAM,CAAC,GAAG,CAAC,CAACG,GAAG,EACpB,IAAI,CAACH,MAAM,CAAC,GAAG,CAAC,CAACI,GACnB,CAAC;IACD,IAAI,CAACC,CAAC,GAAGY,cAAc,CAACI,GAAG,CACzBD,MAAM,EACN,CAAC,EACD,CAAC,EACD,IAAI,CAACpB,MAAM,CAAC,GAAG,CAAC,CAACG,GAAG,EACpB,IAAI,CAACH,MAAM,CAAC,GAAG,CAAC,CAACI,GACnB,CAAC;IAED,IAAI,CAACK,IAAI,IAAI,IAAI,CAACE,GAAG;IACrB,IAAI,CAACD,IAAI,IAAI,IAAI,CAACC,GAAG;EACvB;EAEAW,MAAMA,CAACL,cAAc,EAAE;IACrBA,cAAc,CAACM,IAAI,CAAC,IAAI,CAACxB,SAAS,CAAC;IACnCkB,cAAc,CAACO,OAAO,CAAC,IAAI,CAACtB,CAAC,EAAE,IAAI,CAACG,CAAC,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC;EAClE;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}