{"ast":null,"code":"const characters = \"\\\"'“”‘’¹²³!#$&%()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~½¼¡«»×▓▒░│┤▀└┴┬├─┼┐┌└┘\".split(\"\");\n\nclass FlapText {\n  constructor(element, alphabet) {\n    this.element = element;\n    this.alphabet = alphabet;\n    this.currentPositions = [];\n    this.targetPositions = [];\n    this.randomPositions = [];\n  }\n\n  setInitialPositions(text) {\n    const textArray = text.split(\"\");\n    const textLength = textArray.length;\n    textArray.forEach((char, index) => {\n      const charIndex = this.alphabet.indexOf(char);\n\n      if (charIndex === -1) {\n        this.alphabet.push(char);\n        this.targetPositions[index] = this.alphabet.length - 1;\n      } else {\n        this.targetPositions[index] = charIndex;\n      }\n    });\n    this.currentPositions = Array(textLength).fill(0);\n    this.randomPositions = Array(textLength).fill(0);\n  }\n\n  resetCurrentPositions() {\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] = this.targetPositions[i];\n    }\n\n    this.randomPositions.fill(0);\n  }\n\n  shufflePositions() {\n    const randomOffset = Math.floor(10 * Math.random()) + 5;\n\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] = (this.currentPositions[i] + this.alphabet.length - randomOffset) % this.alphabet.length;\n      this.randomPositions[i] = Math.floor(10 * Math.random());\n    }\n  }\n\n  shiftRandomly(offset, multiplier) {\n    for (let i = 0; i < this.randomPositions.length; i++) {\n      this.randomPositions[i] = offset + i * multiplier;\n    }\n  }\n\n  flap() {\n    if (this.element.dataset.paused !== \"false\") {\n      return;\n    }\n\n    this.currentPositions.forEach((position, index) => {\n      if (this.randomPositions[index] > 0) {\n        this.randomPositions[index]--;\n      } else if (this.currentPositions[index] !== this.targetPositions[index]) {\n        this.currentPositions[index] = (this.currentPositions[index] + 1) % this.alphabet.length;\n      }\n    });\n  }\n\n  render() {\n    const newText = this.currentPositions.reduce((text, position) => {\n      let char = this.alphabet[this.currentPositions[position]];\n\n      if (char === \">\") {\n        char = \"&gt;\";\n      } else if (char === \"<\") {\n        char = \"&lt;\";\n      }\n\n      return text + char;\n    }, \"\");\n\n    if (this.element.innerHTML !== newText) {\n      this.element.innerHTML = newText;\n    }\n  }\n\n}\n\n(function () {\n  const flapTextElements = [];\n  let textIndex = 0;\n  document.querySelectorAll(\".flap\").forEach(flapElement => {\n    const lines = flapElement.innerText.trimEnd().split(\"\\n\").map(line => line.trimEnd().replaceAll(\"\\t\", \"\"));\n    flapElement.innerHTML = \"\";\n\n    if (flapElement.dataset.offset === \"0\") {\n      textIndex = 0;\n    }\n\n    lines.forEach(line => {\n      const span = function (parent, elementType, attributes) {\n        const element = document.createElement(elementType);\n\n        for (const attr in attributes) {\n          element[attr] = attributes[attr];\n        }\n\n        parent.appendChild(element);\n        return element;\n      }(flapElement, \"SPAN\", {\n        dataset: {\n          paused: \"true\"\n        }\n      });\n\n      new IntersectionObserver(entries => {\n        if (entries[0].isIntersecting === true) {\n          span.dataset.paused = \"false\";\n        }\n      }, {\n        threshold: [0]\n      }).observe(span);\n      const flapText = new FlapText(span, characters);\n      flapText.setInitialPositions(line);\n      flapText.render();\n      flapText.shiftRandomly(5 * textIndex++, 1);\n      span.addEventListener(\"mouseenter\", () => {\n        flapText.shufflePositions();\n      });\n      flapTextElements.push(flapText);\n    });\n  });\n  let frameCount = 0;\n  requestAnimationFrame(function animate() {\n    requestAnimationFrame(animate);\n\n    if (frameCount++ % 2 === 0) {\n      for (const flapText of flapTextElements) {\n        flapText.flap();\n        flapText.render();\n      }\n    }\n  });\n  document.querySelectorAll(\".flap\").forEach(flapElement => {\n    flapElement.classList.remove(\"hidden\");\n  });\n})();","map":{"version":3,"mappings":"AASA,MAAMA,UAAS,GACb,gIAAgIC,KAAhI,CACE,EADF,CADF;;AAIA,MAAMC,QAAN,CAAe;AACbC,aAAW,CAACC,OAAD,EAAUC,QAAV,EAAoB;AAC7B,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACF;;AAEAC,qBAAmB,CAACC,IAAD,EAAO;AACxB,UAAMC,SAAQ,GAAID,IAAI,CAACT,KAAL,CAAW,EAAX,CAAlB;AACA,UAAMW,UAAS,GAAID,SAAS,CAACE,MAA7B;AACAF,aAAS,CAACG,OAAV,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjC,YAAMC,SAAQ,GAAI,KAAKZ,QAAL,CAAca,OAAd,CAAsBH,IAAtB,CAAlB;;AACA,UAAIE,SAAQ,KAAM,CAAC,CAAnB,EAAsB;AACpB,aAAKZ,QAAL,CAAcc,IAAd,CAAmBJ,IAAnB;AACA,aAAKR,eAAL,CAAqBS,KAArB,IAA8B,KAAKX,QAAL,CAAcQ,MAAd,GAAuB,CAArD;AACF,OAHA,MAGO;AACL,aAAKN,eAAL,CAAqBS,KAArB,IAA8BC,SAA9B;AACF;AACD,KARD;AASA,SAAKX,gBAAL,GAAwBc,KAAK,CAACR,UAAD,CAAL,CAAkBS,IAAlB,CAAuB,CAAvB,CAAxB;AACA,SAAKb,eAAL,GAAuBY,KAAK,CAACR,UAAD,CAAL,CAAkBS,IAAlB,CAAuB,CAAvB,CAAvB;AACF;;AAEAC,uBAAqB,GAAG;AACtB,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKjB,gBAAL,CAAsBO,MAA1C,EAAkDU,CAAC,EAAnD,EAAuD;AACrD,WAAKjB,gBAAL,CAAsBiB,CAAtB,IAA2B,KAAKhB,eAAL,CAAqBgB,CAArB,CAA3B;AACF;;AACA,SAAKf,eAAL,CAAqBa,IAArB,CAA0B,CAA1B;AACF;;AAEAG,kBAAgB,GAAG;AACjB,UAAMC,YAAW,GAAIC,IAAI,CAACC,KAAL,CAAW,KAAKD,IAAI,CAACE,MAAL,EAAhB,IAAiC,CAAtD;;AACA,SAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAI,KAAKjB,gBAAL,CAAsBO,MAA1C,EAAkDU,CAAC,EAAnD,EAAuD;AACrD,WAAKjB,gBAAL,CAAsBiB,CAAtB,IACE,CAAC,KAAKjB,gBAAL,CAAsBiB,CAAtB,IAA2B,KAAKlB,QAAL,CAAcQ,MAAzC,GAAkDY,YAAnD,IACA,KAAKpB,QAAL,CAAcQ,MAFhB;AAGA,WAAKL,eAAL,CAAqBe,CAArB,IAA0BG,IAAI,CAACC,KAAL,CAAW,KAAKD,IAAI,CAACE,MAAL,EAAhB,CAA1B;AACF;AACF;;AAEAC,eAAa,CAACC,MAAD,EAASC,UAAT,EAAqB;AAChC,SAAK,IAAIR,IAAI,CAAb,EAAgBA,IAAI,KAAKf,eAAL,CAAqBK,MAAzC,EAAiDU,CAAC,EAAlD,EAAsD;AACpD,WAAKf,eAAL,CAAqBe,CAArB,IAA0BO,MAAK,GAAIP,IAAIQ,UAAvC;AACF;AACF;;AAEAC,MAAI,GAAG;AACL,QAAI,KAAK5B,OAAL,CAAa6B,OAAb,CAAqBC,MAArB,KAAgC,OAApC,EAA6C;AAC3C;AACF;;AACA,SAAK5B,gBAAL,CAAsBQ,OAAtB,CAA8B,CAACqB,QAAD,EAAWnB,KAAX,KAAqB;AACjD,UAAI,KAAKR,eAAL,CAAqBQ,KAArB,IAA8B,CAAlC,EAAqC;AACnC,aAAKR,eAAL,CAAqBQ,KAArB;AACF,OAFA,MAEO,IAAI,KAAKV,gBAAL,CAAsBU,KAAtB,MAAiC,KAAKT,eAAL,CAAqBS,KAArB,CAArC,EAAkE;AACvE,aAAKV,gBAAL,CAAsBU,KAAtB,IACE,CAAC,KAAKV,gBAAL,CAAsBU,KAAtB,IAA+B,CAAhC,IAAqC,KAAKX,QAAL,CAAcQ,MADrD;AAEF;AACD,KAPD;AAQF;;AAEAuB,QAAM,GAAG;AACP,UAAMC,OAAM,GAAI,KAAK/B,gBAAL,CAAsBgC,MAAtB,CAA6B,CAAC5B,IAAD,EAAOyB,QAAP,KAAoB;AAC/D,UAAIpB,IAAG,GAAI,KAAKV,QAAL,CAAc,KAAKC,gBAAL,CAAsB6B,QAAtB,CAAd,CAAX;;AACA,UAAIpB,IAAG,KAAM,GAAb,EAAkB;AAChBA,YAAG,GAAI,MAAP;AACF,OAFA,MAEO,IAAIA,IAAG,KAAM,GAAb,EAAkB;AACvBA,YAAG,GAAI,MAAP;AACF;;AACA,aAAOL,IAAG,GAAIK,IAAd;AACD,KARe,EAQb,EARa,CAAhB;;AASA,QAAI,KAAKX,OAAL,CAAamC,SAAb,KAA2BF,OAA/B,EAAwC;AACtC,WAAKjC,OAAL,CAAamC,SAAb,GAAyBF,OAAzB;AACF;AACF;;AA3Ea;;AA8Ef,CAAC,YAAY;AACX,QAAMG,gBAAe,GAAI,EAAzB;AACA,MAAIC,SAAQ,GAAI,CAAhB;AAEAC,UAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC7B,OAAnC,CAA4C8B,WAAD,IAAiB;AAC1D,UAAMC,KAAI,GAAID,WAAW,CAACE,SAAZ,CACXC,OADW,GAEX9C,KAFW,CAEL,IAFK,EAGX+C,GAHW,CAGNC,IAAD,IAAUA,IAAI,CAACF,OAAL,GAAeG,UAAf,CAA0B,IAA1B,EAAgC,EAAhC,CAHH,CAAd;AAIAN,eAAW,CAACL,SAAZ,GAAwB,EAAxB;;AACA,QAAIK,WAAW,CAACX,OAAZ,CAAoBH,MAApB,KAA+B,GAAnC,EAAwC;AACtCW,eAAQ,GAAI,CAAZ;AACF;;AACAI,SAAK,CAAC/B,OAAN,CAAemC,IAAD,IAAU;AACtB,YAAME,IAAG,GAAK,UAAUC,MAAV,EAAkBC,WAAlB,EAA+BC,UAA/B,EAA2C;AACvD,cAAMlD,OAAM,GAAIsC,QAAQ,CAACa,aAAT,CAAuBF,WAAvB,CAAhB;;AACA,aAAK,MAAMG,IAAX,IAAmBF,UAAnB,EAA+B;AAC7BlD,iBAAO,CAACoD,IAAD,CAAP,GAAgBF,UAAU,CAACE,IAAD,CAA1B;AACF;;AACAJ,cAAM,CAACK,WAAP,CAAmBrD,OAAnB;AACA,eAAOA,OAAP;AACD,OAPY,CAOVwC,WAPU,EAOG,MAPH,EAOW;AAAEX,eAAO,EAAE;AAAEC,gBAAM,EAAE;AAAV;AAAX,OAPX,CAAb;;AAQA,UAAIwB,oBAAJ,CACGC,OAAD,IAAa;AACX,YAAIA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,KAA8B,IAAlC,EAAwC;AACtCT,cAAI,CAAClB,OAAL,CAAaC,MAAb,GAAsB,OAAtB;AACF;AACD,OALH,EAME;AAAE2B,iBAAS,EAAE,CAAC,CAAD;AAAb,OANF,EAOEC,OAPF,CAOUX,IAPV;AASA,YAAMY,QAAO,GAAI,IAAI7D,QAAJ,CAAaiD,IAAb,EAAmBnD,UAAnB,CAAjB;AACA+D,cAAQ,CAACtD,mBAAT,CAA6BwC,IAA7B;AACAc,cAAQ,CAAC3B,MAAT;AACA2B,cAAQ,CAAClC,aAAT,CAAuB,IAAIY,SAAS,EAApC,EAAwC,CAAxC;AAEAU,UAAI,CAACa,gBAAL,CAAsB,YAAtB,EAAoC,MAAM;AACxCD,gBAAQ,CAACvC,gBAAT;AACD,OAFD;AAIAgB,sBAAgB,CAACrB,IAAjB,CAAsB4C,QAAtB;AACD,KA5BD;AA6BD,GAtCD;AAwCA,MAAIE,UAAS,GAAI,CAAjB;AACAC,uBAAqB,CAAC,SAASC,OAAT,GAAmB;AACvCD,yBAAqB,CAACC,OAAD,CAArB;;AACA,QAAIF,UAAU,KAAK,CAAf,KAAqB,CAAzB,EAA4B;AAC1B,WAAK,MAAMF,QAAX,IAAuBvB,gBAAvB,EAAyC;AACvCuB,gBAAQ,CAAC/B,IAAT;AACA+B,gBAAQ,CAAC3B,MAAT;AACF;AACF;AACD,GARoB,CAArB;AAUAM,UAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC7B,OAAnC,CAA4C8B,WAAD,IAAiB;AAC1DA,eAAW,CAACwB,SAAZ,CAAsBC,MAAtB,CAA6B,QAA7B;AACD,GAFD;AAGD,CA1DD","names":["characters","split","FlapText","constructor","element","alphabet","currentPositions","targetPositions","randomPositions","setInitialPositions","text","textArray","textLength","length","forEach","char","index","charIndex","indexOf","push","Array","fill","resetCurrentPositions","i","shufflePositions","randomOffset","Math","floor","random","shiftRandomly","offset","multiplier","flap","dataset","paused","position","render","newText","reduce","innerHTML","flapTextElements","textIndex","document","querySelectorAll","flapElement","lines","innerText","trimEnd","map","line","replaceAll","span","parent","elementType","attributes","createElement","attr","appendChild","IntersectionObserver","entries","isIntersecting","threshold","observe","flapText","addEventListener","frameCount","requestAnimationFrame","animate","classList","remove"],"sourceRoot":"","sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/components/FlapText.vue"],"sourcesContent":["<template>\n  <!-- Vous pouvez ajouter le HTML associé ici si nécessaire -->\n  <div class=\"flap\">\n    <!-- Contenu de votre composant FlapText -->\n    Phrase test pour flap text !\n  </div>\n</template>\n\n<script>\nconst characters =\n  \"\\\"'“”‘’¹²³!#$&%()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~½¼¡«»×▓▒░│┤▀└┴┬├─┼┐┌└┘\".split(\n    \"\"\n  );\nclass FlapText {\n  constructor(element, alphabet) {\n    this.element = element;\n    this.alphabet = alphabet;\n    this.currentPositions = [];\n    this.targetPositions = [];\n    this.randomPositions = [];\n  }\n\n  setInitialPositions(text) {\n    const textArray = text.split(\"\");\n    const textLength = textArray.length;\n    textArray.forEach((char, index) => {\n      const charIndex = this.alphabet.indexOf(char);\n      if (charIndex === -1) {\n        this.alphabet.push(char);\n        this.targetPositions[index] = this.alphabet.length - 1;\n      } else {\n        this.targetPositions[index] = charIndex;\n      }\n    });\n    this.currentPositions = Array(textLength).fill(0);\n    this.randomPositions = Array(textLength).fill(0);\n  }\n\n  resetCurrentPositions() {\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] = this.targetPositions[i];\n    }\n    this.randomPositions.fill(0);\n  }\n\n  shufflePositions() {\n    const randomOffset = Math.floor(10 * Math.random()) + 5;\n    for (let i = 0; i < this.currentPositions.length; i++) {\n      this.currentPositions[i] =\n        (this.currentPositions[i] + this.alphabet.length - randomOffset) %\n        this.alphabet.length;\n      this.randomPositions[i] = Math.floor(10 * Math.random());\n    }\n  }\n\n  shiftRandomly(offset, multiplier) {\n    for (let i = 0; i < this.randomPositions.length; i++) {\n      this.randomPositions[i] = offset + i * multiplier;\n    }\n  }\n\n  flap() {\n    if (this.element.dataset.paused !== \"false\") {\n      return;\n    }\n    this.currentPositions.forEach((position, index) => {\n      if (this.randomPositions[index] > 0) {\n        this.randomPositions[index]--;\n      } else if (this.currentPositions[index] !== this.targetPositions[index]) {\n        this.currentPositions[index] =\n          (this.currentPositions[index] + 1) % this.alphabet.length;\n      }\n    });\n  }\n\n  render() {\n    const newText = this.currentPositions.reduce((text, position) => {\n      let char = this.alphabet[this.currentPositions[position]];\n      if (char === \">\") {\n        char = \"&gt;\";\n      } else if (char === \"<\") {\n        char = \"&lt;\";\n      }\n      return text + char;\n    }, \"\");\n    if (this.element.innerHTML !== newText) {\n      this.element.innerHTML = newText;\n    }\n  }\n}\n\n(function () {\n  const flapTextElements = [];\n  let textIndex = 0;\n\n  document.querySelectorAll(\".flap\").forEach((flapElement) => {\n    const lines = flapElement.innerText\n      .trimEnd()\n      .split(\"\\n\")\n      .map((line) => line.trimEnd().replaceAll(\"\\t\", \"\"));\n    flapElement.innerHTML = \"\";\n    if (flapElement.dataset.offset === \"0\") {\n      textIndex = 0;\n    }\n    lines.forEach((line) => {\n      const span = (function (parent, elementType, attributes) {\n        const element = document.createElement(elementType);\n        for (const attr in attributes) {\n          element[attr] = attributes[attr];\n        }\n        parent.appendChild(element);\n        return element;\n      })(flapElement, \"SPAN\", { dataset: { paused: \"true\" } });\n      new IntersectionObserver(\n        (entries) => {\n          if (entries[0].isIntersecting === true) {\n            span.dataset.paused = \"false\";\n          }\n        },\n        { threshold: [0] }\n      ).observe(span);\n\n      const flapText = new FlapText(span, characters);\n      flapText.setInitialPositions(line);\n      flapText.render();\n      flapText.shiftRandomly(5 * textIndex++, 1);\n\n      span.addEventListener(\"mouseenter\", () => {\n        flapText.shufflePositions();\n      });\n\n      flapTextElements.push(flapText);\n    });\n  });\n\n  let frameCount = 0;\n  requestAnimationFrame(function animate() {\n    requestAnimationFrame(animate);\n    if (frameCount++ % 2 === 0) {\n      for (const flapText of flapTextElements) {\n        flapText.flap();\n        flapText.render();\n      }\n    }\n  });\n\n  document.querySelectorAll(\".flap\").forEach((flapElement) => {\n    flapElement.classList.remove(\"hidden\");\n  });\n})();\n</script>\n\n<style scoped>\n/* Styles spécifiques au composant ici, ou utilisez des classes externes */\n</style>\n"]},"metadata":{},"sourceType":"script"}