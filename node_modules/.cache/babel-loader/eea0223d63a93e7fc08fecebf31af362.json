{"ast":null,"code":"import p5 from \"p5\";\nimport utils from \"../helpers/utils\";\nimport { debounce } from \"debounce\";\nimport { onMounted } from \"@vue/runtime-core\";\nexport default {\n  name: \"SweetBackground\",\n\n  setup() {\n    onMounted(() => {\n      const sketch = s => {\n        let w = window.innerWidth;\n        let h = window.innerHeight;\n        let increment = 0.001;\n        let xoff = 0.0;\n        let yoff = 10.0;\n\n        s.setup = () => {\n          s.createCanvas(w, h);\n        };\n\n        s.draw = () => {\n          s.background(200);\n          s.fill(255);\n          const orbs = [];\n          let originX = window.innerWidth / 1.25;\n          let originY = window.innerWidth < 1000 ? window.innerHeight : window.innerHeight / 1.375;\n\n          for (let i = 0; i < 10; i++) {\n            const orb = new Orb(0xff0000, originX, originY);\n            orbs.push(orb);\n          }\n\n          originX = window.innerWidth * 0.2;\n          originY = window.innerWidth < 1000 ? 0 : window.innerHeight * 0.275;\n\n          for (let i = 0; i < 10; i++) {\n            const orb = new Orb(0x0000ff, originX, originY);\n            orbs.push(orb);\n          }\n\n          xoff += increment;\n          yoff += increment;\n          const x = s.noise(xoff) * w;\n          const y = s.noise(yoff) * h;\n          s.ellipse(x, y, 200, 200);\n        };\n\n        window.onresize = function () {\n          // assigns new values for width and height variables\n          w = window.innerWidth;\n          h = window.innerHeight;\n          s.resizeCanvas(w, h);\n        };\n\n        class Orb {\n          constructor(originX, originY, fillColor) {\n            this.bounds = this.setBounds(originX, originY);\n            this.x = utils.random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n            this.y = utils.random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n            this.scale = 1;\n            this.radius = utils.random(window.innerHeight / 6, window.innerHeight / 3);\n            this.xOff = utils.random(0, 1000);\n            this.yOff = utils.random(0, 1000);\n            this.inc = 0.002;\n            this.fillColor = fillColor;\n            window.addEventListener(\"resize\", debounce(() => {\n              this.bounds = this.setBounds();\n            }, 250));\n          }\n\n          setBounds(originX, originY) {\n            const maxDist = window.innerWidth < 1000 ? window.innerWidth / 3 : window.innerWidth / 5;\n            return {\n              x: {\n                min: originX - maxDist,\n                max: originX + maxDist\n              },\n              y: {\n                min: originY - maxDist,\n                max: originY + maxDist\n              }\n            };\n          }\n\n          move() {\n            const xNoise = s.noise(this.xOff, this.xOff);\n            const yNoise = s.noise(this.yOff, this.yOff);\n            const scaleNoise = s.noise(this.xOff, this.yOff);\n            this.x = utils.map(xNoise, -1, 1, this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n            this.y = utils.map(yNoise, -1, 1, this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n            this.scale = utils.map(scaleNoise, -1, 1, 0.5, 1);\n            this.xOff += this.inc;\n            this.yOff += this.inc;\n          }\n\n          render() {\n            s.fill(this.fillColor);\n            s.ellipse(this.x, this.y, this.radius, this.radius);\n          }\n\n        }\n      };\n\n      const sketchInstance = new p5(sketch, \"orb-sketch\");\n      /* const app = new PIXI.Application({\n        view: document.querySelector(\".orb-canvas\"),\n        resizeTo: window,\n        backgroundAlpha: 0,\n      });\n       app.stage.filters = [new KawaseBlurFilter(30, 20, true)];\n       const orbs = [];\n       let originX = window.innerWidth / 1.25;\n      let originY =\n        window.innerWidth < 1000\n          ? window.innerHeight\n          : window.innerHeight / 1.375;\n       for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0xff0000, originX, originY);\n        app.stage.addChild(orb.graphics);\n         orbs.push(orb);\n      }\n       originX = window.innerWidth * 0.2;\n      originY = window.innerWidth < 1000 ? 0 : window.innerHeight * 0.275;\n       for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0x0000ff, originX, originY);\n        app.stage.addChild(orb.graphics);\n         orbs.push(orb);\n      }\n       if (!window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches) {\n        app.ticker.add(() => {\n          orbs.forEach((orb) => {\n            orb.update();\n            orb.render();\n          });\n        });\n      } else {\n        orbs.forEach((orb) => {\n          orb.update();\n          orb.render();\n        });\n      }*/\n    });\n  }\n\n};","map":{"version":3,"mappings":"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","names":["p5","utils","debounce","onMounted","name","setup","sketch","s","w","window","innerWidth","h","innerHeight","increment","xoff","yoff","createCanvas","draw","background","fill","orbs","originX","originY","i","orb","Orb","push","x","noise","y","ellipse","onresize","resizeCanvas","constructor","fillColor","bounds","setBounds","random","min","max","scale","radius","xOff","yOff","inc","addEventListener","maxDist","move","xNoise","yNoise","scaleNoise","map","render","sketchInstance"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/components/SweetBackground.vue"],"sourcesContent":["<template>\n  <!-- Canvas -->\n\n  <div id=\"orb-sketch\"></div>\n  <div class=\"test\"></div>\n</template>\n\n<script>\nimport p5 from \"p5\";\nimport utils from \"../helpers/utils\";\nimport { debounce } from \"debounce\";\nimport { onMounted } from \"@vue/runtime-core\";\n\nexport default {\n  name: \"SweetBackground\",\n  setup() {\n    onMounted(() => {\n      const sketch = (s) => {\n        let w = window.innerWidth;\n        let h = window.innerHeight;\n\n        let increment = 0.001;\n        let xoff = 0.0;\n        let yoff = 10.0;\n\n        s.setup = () => {\n          s.createCanvas(w, h);\n        };\n\n        s.draw = () => {\n          s.background(200);\n          s.fill(255);\n\n          const orbs = [];\n          let originX = window.innerWidth / 1.25;\n          let originY =\n            window.innerWidth < 1000\n              ? window.innerHeight\n              : window.innerHeight / 1.375;\n\n          for (let i = 0; i < 10; i++) {\n            const orb = new Orb(0xff0000, originX, originY);\n            orbs.push(orb);\n          }\n\n          originX = window.innerWidth * 0.2;\n          originY = window.innerWidth < 1000 ? 0 : window.innerHeight * 0.275;\n\n          for (let i = 0; i < 10; i++) {\n            const orb = new Orb(0x0000ff, originX, originY);\n            orbs.push(orb);\n          }\n\n          xoff += increment;\n          yoff += increment;\n          const x = s.noise(xoff) * w;\n          const y = s.noise(yoff) * h;\n\n          s.ellipse(x, y, 200, 200);\n        };\n\n        window.onresize = function () {\n          // assigns new values for width and height variables\n          w = window.innerWidth;\n          h = window.innerHeight;\n          s.resizeCanvas(w, h);\n        };\n\n        class Orb {\n          constructor(originX, originY, fillColor) {\n            this.bounds = this.setBounds(originX, originY);\n            this.x = utils.random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n            this.y = utils.random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n\n            this.scale = 1;\n\n            this.radius = utils.random(\n              window.innerHeight / 6,\n              window.innerHeight / 3\n            );\n\n            this.xOff = utils.random(0, 1000);\n            this.yOff = utils.random(0, 1000);\n            this.inc = 0.002;\n\n            this.fillColor = fillColor;\n            window.addEventListener(\n              \"resize\",\n              debounce(() => {\n                this.bounds = this.setBounds();\n              }, 250)\n            );\n          }\n\n          setBounds(originX, originY) {\n            const maxDist =\n              window.innerWidth < 1000\n                ? window.innerWidth / 3\n                : window.innerWidth / 5;\n\n            return {\n              x: {\n                min: originX - maxDist,\n                max: originX + maxDist,\n              },\n              y: {\n                min: originY - maxDist,\n                max: originY + maxDist,\n              },\n            };\n          }\n\n          move() {\n            const xNoise = s.noise(this.xOff, this.xOff);\n            const yNoise = s.noise(this.yOff, this.yOff);\n            const scaleNoise = s.noise(this.xOff, this.yOff);\n\n            this.x = utils.map(\n              xNoise,\n              -1,\n              1,\n              this.bounds[\"x\"].min,\n              this.bounds[\"x\"].max\n            );\n            this.y = utils.map(\n              yNoise,\n              -1,\n              1,\n              this.bounds[\"y\"].min,\n              this.bounds[\"y\"].max\n            );\n            this.scale = utils.map(scaleNoise, -1, 1, 0.5, 1);\n\n            this.xOff += this.inc;\n            this.yOff += this.inc;\n          }\n\n          render() {\n            s.fill(this.fillColor);\n            s.ellipse(this.x, this.y, this.radius, this.radius);\n          }\n        }\n      };\n\n      const sketchInstance = new p5(sketch, \"orb-sketch\");\n\n      /* const app = new PIXI.Application({\n        view: document.querySelector(\".orb-canvas\"),\n        resizeTo: window,\n        backgroundAlpha: 0,\n      });\n\n      app.stage.filters = [new KawaseBlurFilter(30, 20, true)];\n\n      const orbs = [];\n\n      let originX = window.innerWidth / 1.25;\n      let originY =\n        window.innerWidth < 1000\n          ? window.innerHeight\n          : window.innerHeight / 1.375;\n\n      for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0xff0000, originX, originY);\n        app.stage.addChild(orb.graphics);\n\n        orbs.push(orb);\n      }\n\n      originX = window.innerWidth * 0.2;\n      originY = window.innerWidth < 1000 ? 0 : window.innerHeight * 0.275;\n\n      for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0x0000ff, originX, originY);\n        app.stage.addChild(orb.graphics);\n\n        orbs.push(orb);\n      }\n\n      if (!window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches) {\n        app.ticker.add(() => {\n          orbs.forEach((orb) => {\n            orb.update();\n            orb.render();\n          });\n        });\n      } else {\n        orbs.forEach((orb) => {\n          orb.update();\n          orb.render();\n        });\n      }*/\n    });\n  },\n};\n</script>\n\n<style>\n@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {\n  #orb-sketch {\n    position: fixed;\n  }\n  .test {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n    background: rgba(170, 196, 200, 0.1);\n    backdrop-filter: saturate(180%) blur(3rem);\n    border: 10px black;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}