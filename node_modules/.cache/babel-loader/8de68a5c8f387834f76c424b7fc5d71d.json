{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-3ee02572\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"flap\"\n}, [/*#__PURE__*/_createCommentVNode(\" Contenu de votre composant FlapText \"), /*#__PURE__*/_createTextVNode(\" Phrase test pour flap text ! \")], -1\n/* HOISTED */\n));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Vous pouvez ajouter le HTML associé ici si nécessaire \"), _hoisted_1], 2112\n  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;gEAEEA,oBAGI,GAHJ,EAGI;AAHDC,OAAK,EAAC;AAGL,CAHJ,EAAe,cACbC,4DADa,gCAC+B,iCAD/B,CAAf;;AAAA;;;6DADAA,gFACAC","names":["_createElementVNode","class","_createCommentVNode","_hoisted_1"],"sourceRoot":"","sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/components/FlapText.vue"],"sourcesContent":["<template>\n  <!-- Vous pouvez ajouter le HTML associé ici si nécessaire -->\n  <p class=\"flap\">\n    <!-- Contenu de votre composant FlapText -->\n    Phrase test pour flap text !\n  </p>\n</template>\n\n<script>\nimport FlapText from \"../helpers/FlapText\";\n\nexport default {\n  name: \"FlapText\",\n  components: {\n    FlapText,\n  },\n\n  mounted() {\n    const characters =\n      \"\\\"'“”‘’¹²³!#$&%()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~½¼¡«»×▓▒░│┤▀└┴┬├─┼┐┌└┘\".split(\n        \"\"\n      );\n\n    (function () {\n      const flapTextElements = [];\n      let textIndex = 0;\n\n      document.querySelectorAll(\".flap\").forEach((flapElement) => {\n        const lines = flapElement.innerText\n          .trimEnd()\n          .split(\"\\n\")\n          .map((line) => line.trimEnd().replaceAll(\"\\t\", \"\"));\n        flapElement.innerHTML = \"\";\n        if (flapElement.dataset.offset === \"0\") {\n          textIndex = 0;\n        }\n        lines.forEach((line) => {\n          const span = (function (parent, elementType, attributes) {\n            const element = document.createElement(elementType);\n            for (const attr in attributes) {\n              element[attr] = attributes[attr];\n            }\n            parent.appendChild(element);\n            return element;\n          })(flapElement, \"SPAN\", { dataset: { paused: \"true\" } });\n          new IntersectionObserver(\n            (entries) => {\n              if (entries[0].isIntersecting === true) {\n                span.dataset.paused = \"false\";\n              }\n            },\n            { threshold: [0] }\n          ).observe(span);\n\n          const flapText = new FlapText(span, characters);\n          flapText.setInitialPositions(line);\n          flapText.render();\n          flapText.shiftRandomly(5 * textIndex++, 1);\n\n          span.addEventListener(\"mouseenter\", () => {\n            flapText.shufflePositions();\n          });\n\n          flapTextElements.push(flapText);\n        });\n      });\n\n      let frameCount = 0;\n      requestAnimationFrame(function animate() {\n        requestAnimationFrame(animate);\n        if (frameCount++ % 2 === 0) {\n          for (const flapText of flapTextElements) {\n            flapText.flap();\n            flapText.render();\n          }\n        }\n      });\n\n      document.querySelectorAll(\".flap\").forEach((flapElement) => {\n        flapElement.classList.remove(\"hidden\");\n      });\n    })();\n  },\n};\n</script>\n\n<style scoped>\n/* Styles spécifiques au composant ici, ou utilisez des classes externes */\n</style>\n"]},"metadata":{},"sourceType":"module"}