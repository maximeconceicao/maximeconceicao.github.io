{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"game-timer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"p\", null, _toDisplayString($setup.minutesLeft) + \" : \" + _toDisplayString($setup.secondsLeft), 1\n  /* TEXT */\n  )]);\n}","map":{"version":3,"mappings":";;AACOA,OAAK,EAAC;;;uBAAXC,oBAEM,KAFN,cAEM,CADJC,oBAA4C,GAA5C,EAA4C,IAA5C,EAA4CC,iBAAtCC,kBAAsC,IAAxB,KAAwB,GAArBD,iBAAGC,kBAAH,CAAvB,EAAqC;AAAA;AAArC,GACI,CAFN","names":["class","_createElementBlock","_createElementVNode","_toDisplayString","$setup"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/components/SweetGameTimer.vue"],"sourcesContent":["<template>\n  <div class=\"game-timer\">\n    <p>{{ minutesLeft }} : {{ secondsLeft }}</p>\n  </div>\n</template>\n\n<script>\nimport { onMounted, ref } from \"vue\";\n\nexport default {\n  name: \"SweetGameTimer\",\n  setup(props) {\n    const minutesLeft = ref(0);\n    const secondsLeft = ref(0);\n\n    let countDownDate = new Date().getTime() + 60000;\n\n    // Update the count down every 1 second\n    var x = setInterval(function () {\n      // Get today's date and time\n      var now = new Date().getTime();\n\n      // Find the distance between now and the count down date\n      var distance = countDownDate - now;\n\n      // Time calculations for days, hours, minutes and seconds\n      var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      var hours = Math.floor(\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      var seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n      minutesLeft.value = minutes;\n      secondsLeft.value = seconds;\n\n      // If the count down is finished, write some text\n      if (distance < 0) {\n        clearInterval(x);\n        document.getElementById(\"demo\").innerHTML = \"EXPIRED\";\n      }\n    }, 1000);\n\n    return { minutesLeft, secondsLeft };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}