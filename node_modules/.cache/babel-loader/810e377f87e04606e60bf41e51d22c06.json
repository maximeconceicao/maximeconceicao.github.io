{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"test\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"orb-sketch\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Canvas \"), _hoisted_1, _hoisted_2], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCAEEA,oBAAwB,KAAxB,EAAwB;AAAnBC,OAAK,EAAC;AAAa,CAAxB,EAAiB,IAAjB,EAAiB;AAAA;AAAjB;;gCACAD,oBAA2B,KAA3B,EAA2B;AAAtBE,IAAE,EAAC;AAAmB,CAA3B,EAAoB,IAApB,EAAoB;AAAA;AAApB;;;6DAFAC,iCACAC,YACAC","names":["_createElementVNode","class","id","_createCommentVNode","_hoisted_1","_hoisted_2"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/components/SweetBackground.vue"],"sourcesContent":["<template>\n  <!-- Canvas -->\n  <div class=\"test\"></div>\n  <div id=\"orb-sketch\"></div>\n</template>\n\n<script>\nimport * as PIXI from \"pixi.js\";\nimport p5 from \"p5\";\nimport Orb from \"../helpers/Orb_old\";\nimport { KawaseBlurFilter } from \"@pixi/filter-kawase-blur\";\nimport { onMounted } from \"@vue/runtime-core\";\n\nexport default {\n  name: \"SweetBackground\",\n  setup() {\n    onMounted(() => {\n      const sketch = (s) => {\n        let w = window.innerWidth;\n        let h = window.innerHeight;\n\n        let increment = 0.001;\n        let xoff = 0.0;\n        let yoff = 10.0;\n\n        s.setup = () => {\n          s.createCanvas(w, h);\n        };\n\n        s.draw = () => {\n          s.background(200);\n          s.fill(255);\n\n          xoff += increment;\n          yoff += increment;\n          const x = s.noise(xoff) * w;\n          const y = s.noise(yoff) * h;\n\n          s.ellipse(x, y, 200, 200);\n        };\n\n        window.onresize = function () {\n          // assigns new values for width and height variables\n          w = window.innerWidth;\n          h = window.innerHeight;\n          s.resizeCanvas(w, h);\n        };\n      };\n\n      const sketchInstance = new p5(sketch, \"orb-sketch\");\n\n      /* const app = new PIXI.Application({\n        view: document.querySelector(\".orb-canvas\"),\n        resizeTo: window,\n        backgroundAlpha: 0,\n      });\n\n      app.stage.filters = [new KawaseBlurFilter(30, 20, true)];\n\n      const orbs = [];\n\n      let originX = window.innerWidth / 1.25;\n      let originY =\n        window.innerWidth < 1000\n          ? window.innerHeight\n          : window.innerHeight / 1.375;\n\n      for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0xff0000, originX, originY);\n        app.stage.addChild(orb.graphics);\n\n        orbs.push(orb);\n      }\n\n      originX = window.innerWidth * 0.2;\n      originY = window.innerWidth < 1000 ? 0 : window.innerHeight * 0.275;\n\n      for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0x0000ff, originX, originY);\n        app.stage.addChild(orb.graphics);\n\n        orbs.push(orb);\n      }\n\n      if (!window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches) {\n        app.ticker.add(() => {\n          orbs.forEach((orb) => {\n            orb.update();\n            orb.render();\n          });\n        });\n      } else {\n        orbs.forEach((orb) => {\n          orb.update();\n          orb.render();\n        });\n      }*/\n    });\n  },\n};\n</script>\n\n<style>\n.test {\n  height: 300px;\n  background: rgba(170, 196, 200, 0.1);\n  backdrop-filter: saturate(180%) blur(3rem);\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}