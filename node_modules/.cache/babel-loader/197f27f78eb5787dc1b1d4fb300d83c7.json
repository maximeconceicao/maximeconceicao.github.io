{"ast":null,"code":"import \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport { defineComponent, ref, onMounted } from \"vue\";\nimport SweetGameSequence from \"@/components/SweetGameSequence.vue\";\nimport SweetGameCells from \"@/components/SweetGameCells.vue\";\nimport SweetGameButtons from \"@/components/SweetGameButtons.vue\";\nimport { SHAPES, START_SEQUENCE_LENGTH } from \"@/helpers/game.constants\";\nimport { random } from \"@/helpers/utils.js\";\nexport default defineComponent({\n  name: \"GameView\",\n  components: {\n    SweetGameSequence,\n    SweetGameCells,\n    SweetGameButtons\n  },\n\n  setup() {\n    let sequenceLength = START_SEQUENCE_LENGTH;\n    let sequenceToFind = ref([]);\n    let playerSequence = ref([]);\n    let score = ref(0);\n\n    function resetGame() {\n      sequenceLength = START_SEQUENCE_LENGTH;\n      resetSequences();\n    }\n\n    function resetSequences() {\n      sequenceToFind.value = generateStartingSequence(sequenceLength);\n      playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n    }\n\n    function generateStartingSequence(sequenceLength) {\n      const generatedSequence = [];\n\n      for (let i = 0; i < sequenceLength; i++) {\n        let indexOfShape = Math.floor(random(0, Object.keys(SHAPES).length));\n        generatedSequence.push(Object.values(SHAPES)[indexOfShape]);\n      }\n\n      return generatedSequence;\n    }\n\n    function resetPlayerSequence(sequenceLength) {\n      return Array.apply(null, Array(sequenceLength)).map(() => {\n        return null;\n      });\n    }\n\n    function onDrawShape(shape) {\n      console.log(\"On Draw Shape ! \", shape, playerSequence.value);\n      const index = playerSequence.value.findIndex(shape => shape === null);\n\n      if (index > -1) {\n        playerSequence.value[index] = shape;\n      } else {\n        playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n      }\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    function validateSequence() {\n      if (JSON.stringify(playerSequence.value) === JSON.stringify(sequenceToFind.value)) {\n        score.value += 1;\n        sequenceLength += 1;\n        resetSequences();\n      } else {\n        console.log(\"LOOSE !\");\n      }\n    }\n\n    function onReverse() {\n      let playerSequenceCopy = [...playerSequence.value];\n      playerSequenceCopy.forEach((shape, index) => {\n        switch (shape) {\n          case SHAPES.STAR:\n            playerSequence.value[index] = SHAPES.TRIANGLE;\n            break;\n\n          case SHAPES.SQUARE:\n            playerSequence.value[index] = SHAPES.CIRCLE;\n            break;\n\n          case SHAPES.TRIANGLE:\n            playerSequence.value[index] = SHAPES.STAR;\n            break;\n\n          case SHAPES.CIRCLE:\n            playerSequence.value[index] = SHAPES.SQUARE;\n            break;\n        }\n      });\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    onMounted(() => {\n      resetGame();\n      console.log(\"PLAYER SEQUENCE \", playerSequence.value.at(-1));\n    });\n    return {\n      sequenceToFind,\n      playerSequence,\n      onDrawShape,\n      onReverse\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["defineComponent","ref","onMounted","SweetGameSequence","SweetGameCells","SweetGameButtons","SHAPES","START_SEQUENCE_LENGTH","random","name","components","setup","sequenceLength","sequenceToFind","playerSequence","score","resetGame","resetSequences","value","generateStartingSequence","resetPlayerSequence","length","generatedSequence","i","indexOfShape","Math","floor","Object","keys","push","values","Array","apply","map","onDrawShape","shape","console","log","index","findIndex","at","validateSequence","JSON","stringify","onReverse","playerSequenceCopy","forEach","STAR","TRIANGLE","SQUARE","CIRCLE"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/views/GameView.vue"],"sourcesContent":["<template>\n  <main id=\"main-game\">\n    <sweet-game-sequence :sequenceToFind=\"sequenceToFind\" />\n    <sweet-game-cells\n      v-if=\"playerSequence?.length\"\n      :playerSequence=\"playerSequence\"\n    />\n    <sweet-game-buttons @drawShape=\"onDrawShape\" @reverse=\"onReverse\" />\n  </main>\n</template>\n\n<script>\nimport { defineComponent, ref, onMounted } from \"vue\";\nimport SweetGameSequence from \"@/components/SweetGameSequence.vue\";\nimport SweetGameCells from \"@/components/SweetGameCells.vue\";\nimport SweetGameButtons from \"@/components/SweetGameButtons.vue\";\nimport { SHAPES, START_SEQUENCE_LENGTH } from \"@/helpers/game.constants\";\nimport { random } from \"@/helpers/utils.js\";\n\nexport default defineComponent({\n  name: \"GameView\",\n  components: { SweetGameSequence, SweetGameCells, SweetGameButtons },\n  setup() {\n    let sequenceLength = START_SEQUENCE_LENGTH;\n    let sequenceToFind = ref([]);\n    let playerSequence = ref([]);\n    let score = ref(0);\n\n    function resetGame() {\n      sequenceLength = START_SEQUENCE_LENGTH;\n      resetSequences();\n    }\n\n    function resetSequences() {\n      sequenceToFind.value = generateStartingSequence(sequenceLength);\n      playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n    }\n\n    function generateStartingSequence(sequenceLength) {\n      const generatedSequence = [];\n      for (let i = 0; i < sequenceLength; i++) {\n        let indexOfShape = Math.floor(random(0, Object.keys(SHAPES).length));\n        generatedSequence.push(Object.values(SHAPES)[indexOfShape]);\n      }\n      return generatedSequence;\n    }\n\n    function resetPlayerSequence(sequenceLength) {\n      return Array.apply(null, Array(sequenceLength)).map(() => {\n        return null;\n      });\n    }\n\n    function onDrawShape(shape) {\n      console.log(\"On Draw Shape ! \", shape, playerSequence.value);\n      const index = playerSequence.value.findIndex((shape) => shape === null);\n\n      if (index > -1) {\n        playerSequence.value[index] = shape;\n      } else {\n        playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n      }\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    function validateSequence() {\n      if (\n        JSON.stringify(playerSequence.value) ===\n        JSON.stringify(sequenceToFind.value)\n      ) {\n        score.value += 1;\n        sequenceLength += 1;\n        resetSequences();\n      } else {\n        console.log(\"LOOSE !\");\n      }\n    }\n\n    function onReverse() {\n      let playerSequenceCopy = [...playerSequence.value];\n      playerSequenceCopy.forEach((shape, index) => {\n        switch (shape) {\n          case SHAPES.STAR:\n            playerSequence.value[index] = SHAPES.TRIANGLE;\n            break;\n          case SHAPES.SQUARE:\n            playerSequence.value[index] = SHAPES.CIRCLE;\n            break;\n          case SHAPES.TRIANGLE:\n            playerSequence.value[index] = SHAPES.STAR;\n            break;\n          case SHAPES.CIRCLE:\n            playerSequence.value[index] = SHAPES.SQUARE;\n            break;\n        }\n      });\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    onMounted(() => {\n      resetGame();\n      console.log(\"PLAYER SEQUENCE \", playerSequence.value.at(-1));\n    });\n    return { sequenceToFind, playerSequence, onDrawShape, onReverse };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}