{"ast":null,"code":"import p5 from \"p5\";\nimport utils from \"../helpers/utils\";\nimport { debounce } from \"debounce\";\nimport { onMounted } from \"@vue/runtime-core\";\nexport default {\n  name: \"SweetBackground\",\n\n  setup() {\n    onMounted(() => {\n      const sketch = s => {\n        let w = window.innerWidth;\n        let h = window.innerHeight;\n        let increment = 0.001;\n        let xoff = 0.0;\n        let yoff = 10.0;\n\n        s.setup = () => {\n          s.createCanvas(w, h);\n        };\n\n        s.draw = () => {\n          s.background(200);\n          s.fill(255);\n          const orbs = [];\n          xoff += increment;\n          yoff += increment;\n          const x = s.noise(xoff) * w;\n          const y = s.noise(yoff) * h;\n          s.ellipse(x, y, 200, 200);\n        };\n\n        window.onresize = function () {\n          // assigns new values for width and height variables\n          w = window.innerWidth;\n          h = window.innerHeight;\n          s.resizeCanvas(w, h);\n        };\n\n        class Orb {\n          constructor(originX, originY, fillColor) {\n            this.bounds = this.setBounds(originX, originY);\n            this.x = utils.random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n            this.y = utils.random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n            this.scale = 1;\n            this.fillColor = fillColor;\n            window.addEventListener(\"resize\", debounce(() => {\n              this.bounds = this.setBounds();\n            }, 250));\n          }\n\n          setBounds(originX, originY) {\n            const maxDist = window.innerWidth < 1000 ? window.innerWidth / 3 : window.innerWidth / 5;\n            return {\n              x: {\n                min: originX - maxDist,\n                max: originX + maxDist\n              },\n              y: {\n                min: originY - maxDist,\n                max: originY + maxDist\n              }\n            };\n          }\n\n          move() {\n            this.x += 0;\n          }\n\n          render() {\n            s.fill(this.fillColor);\n          }\n\n        }\n      };\n\n      const sketchInstance = new p5(sketch, \"orb-sketch\");\n      /* const app = new PIXI.Application({\n        view: document.querySelector(\".orb-canvas\"),\n        resizeTo: window,\n        backgroundAlpha: 0,\n      });\n       app.stage.filters = [new KawaseBlurFilter(30, 20, true)];\n       const orbs = [];\n       let originX = window.innerWidth / 1.25;\n      let originY =\n        window.innerWidth < 1000\n          ? window.innerHeight\n          : window.innerHeight / 1.375;\n       for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0xff0000, originX, originY);\n        app.stage.addChild(orb.graphics);\n         orbs.push(orb);\n      }\n       originX = window.innerWidth * 0.2;\n      originY = window.innerWidth < 1000 ? 0 : window.innerHeight * 0.275;\n       for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0x0000ff, originX, originY);\n        app.stage.addChild(orb.graphics);\n         orbs.push(orb);\n      }\n       if (!window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches) {\n        app.ticker.add(() => {\n          orbs.forEach((orb) => {\n            orb.update();\n            orb.render();\n          });\n        });\n      } else {\n        orbs.forEach((orb) => {\n          orb.update();\n          orb.render();\n        });\n      }*/\n    });\n  }\n\n};","map":{"version":3,"mappings":"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","names":["p5","utils","debounce","onMounted","name","setup","sketch","s","w","window","innerWidth","h","innerHeight","increment","xoff","yoff","createCanvas","draw","background","fill","orbs","x","noise","y","ellipse","onresize","resizeCanvas","Orb","constructor","originX","originY","fillColor","bounds","setBounds","random","min","max","scale","addEventListener","maxDist","move","render","sketchInstance"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/components/SweetBackground.vue"],"sourcesContent":["<template>\n  <!-- Canvas -->\n\n  <div id=\"orb-sketch\"></div>\n  <div class=\"test\"></div>\n</template>\n\n<script>\nimport p5 from \"p5\";\nimport utils from \"../helpers/utils\";\nimport { debounce } from \"debounce\";\nimport { onMounted } from \"@vue/runtime-core\";\n\nexport default {\n  name: \"SweetBackground\",\n  setup() {\n    onMounted(() => {\n      const sketch = (s) => {\n        let w = window.innerWidth;\n        let h = window.innerHeight;\n\n        let increment = 0.001;\n        let xoff = 0.0;\n        let yoff = 10.0;\n\n        s.setup = () => {\n          s.createCanvas(w, h);\n        };\n\n        s.draw = () => {\n          s.background(200);\n          s.fill(255);\n\n          const orbs = [];\n\n          xoff += increment;\n          yoff += increment;\n          const x = s.noise(xoff) * w;\n          const y = s.noise(yoff) * h;\n\n          s.ellipse(x, y, 200, 200);\n        };\n\n        window.onresize = function () {\n          // assigns new values for width and height variables\n          w = window.innerWidth;\n          h = window.innerHeight;\n          s.resizeCanvas(w, h);\n        };\n\n        class Orb {\n          constructor(originX, originY, fillColor) {\n            this.bounds = this.setBounds(originX, originY);\n            this.x = utils.random(this.bounds[\"x\"].min, this.bounds[\"x\"].max);\n            this.y = utils.random(this.bounds[\"y\"].min, this.bounds[\"y\"].max);\n            this.scale = 1;\n            this.fillColor = fillColor;\n            window.addEventListener(\n              \"resize\",\n              debounce(() => {\n                this.bounds = this.setBounds();\n              }, 250)\n            );\n          }\n\n          setBounds(originX, originY) {\n            const maxDist =\n              window.innerWidth < 1000\n                ? window.innerWidth / 3\n                : window.innerWidth / 5;\n\n            return {\n              x: {\n                min: originX - maxDist,\n                max: originX + maxDist,\n              },\n              y: {\n                min: originY - maxDist,\n                max: originY + maxDist,\n              },\n            };\n          }\n\n          move() {\n            this.x += 0;\n          }\n\n          render() {\n            s.fill(this.fillColor);\n          }\n        }\n      };\n\n      const sketchInstance = new p5(sketch, \"orb-sketch\");\n\n      /* const app = new PIXI.Application({\n        view: document.querySelector(\".orb-canvas\"),\n        resizeTo: window,\n        backgroundAlpha: 0,\n      });\n\n      app.stage.filters = [new KawaseBlurFilter(30, 20, true)];\n\n      const orbs = [];\n\n      let originX = window.innerWidth / 1.25;\n      let originY =\n        window.innerWidth < 1000\n          ? window.innerHeight\n          : window.innerHeight / 1.375;\n\n      for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0xff0000, originX, originY);\n        app.stage.addChild(orb.graphics);\n\n        orbs.push(orb);\n      }\n\n      originX = window.innerWidth * 0.2;\n      originY = window.innerWidth < 1000 ? 0 : window.innerHeight * 0.275;\n\n      for (let i = 0; i < 10; i++) {\n        const orb = new Orb(0x0000ff, originX, originY);\n        app.stage.addChild(orb.graphics);\n\n        orbs.push(orb);\n      }\n\n      if (!window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches) {\n        app.ticker.add(() => {\n          orbs.forEach((orb) => {\n            orb.update();\n            orb.render();\n          });\n        });\n      } else {\n        orbs.forEach((orb) => {\n          orb.update();\n          orb.render();\n        });\n      }*/\n    });\n  },\n};\n</script>\n\n<style>\n@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {\n  #orb-sketch {\n    position: fixed;\n  }\n  .test {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n    background: rgba(170, 196, 200, 0.1);\n    backdrop-filter: saturate(180%) blur(3rem);\n    border: 10px black;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}