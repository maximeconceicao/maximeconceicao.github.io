{"ast":null,"code":"import FlapText from \"../helpers/FlapText\";\nexport default {\n  name: \"FlapText\",\n\n  mounted() {\n    const characters = \"\\\"'“”‘’¹²³!#$&%()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~½¼¡«»×▓▒░│┤▀└┴┬├─┼┐┌└┘\".split(\"\"); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    const shuffledCharacters = characters.sort((a, b) => 0.5 - Math.random());\n    console.log(\"shuffledCharacters\", shuffledCharacters);\n\n    (function () {\n      const flapTextElements = [];\n      let textIndex = 0;\n      document.querySelectorAll(\".flap\").forEach(flapElement => {\n        const lines = flapElement.innerText.trimEnd().split(\"\\n\").map(line => line.trimEnd().replaceAll(\"\\t\", \"\"));\n        console.log(\"LINEs\", lines);\n        flapElement.innerHTML = \"\";\n        lines.forEach(line => {\n          const span = document.createElement(\"span\");\n          span.dataset.paused = \"true\";\n          span.dataset.originalText = line; // Stockez le texte original dans un attribut personnalisé\n\n          flapElement.appendChild(span);\n          new IntersectionObserver(entries => {\n            if (entries[0].isIntersecting === true) {\n              span.dataset.paused = \"false\";\n            }\n          }, {\n            threshold: [0]\n          }).observe(span);\n          const flapText = new FlapText(span, shuffledCharacters);\n          flapText.setInitialPositions(line);\n          flapText.shufflePositions();\n          flapText.render();\n          span.addEventListener(\"mouseenter\", () => {\n            flapText.shufflePositions();\n          });\n          flapTextElements.push(flapText);\n        });\n      });\n      let frameCount = 0;\n      requestAnimationFrame(function animate() {\n        requestAnimationFrame(animate);\n\n        if (frameCount++ % 2 === 0) {\n          for (const flapText of flapTextElements) {\n            flapText.flap();\n            flapText.render();\n          }\n        }\n      }); //   document.querySelectorAll(\".flap\").forEach((flapElement) => {\n      //     flapElement.classList.remove(\"hidden\");\n      //   });\n    })();\n  }\n\n};","map":{"version":3,"mappings":"AASA,OAAOA,QAAP,MAAqB,qBAArB;AAEA,eAAe;AACbC,MAAI,EAAE,UADO;;AAEbC,SAAO,GAAG;AACR,UAAMC,UAAS,GACb,gIAAgIC,KAAhI,CACE,EADF,CADF,CADQ,CAMR;;AACA,UAAMC,kBAAiB,GAAIF,UAAU,CAACG,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAU,MAAMC,IAAI,CAACC,MAAL,EAAhC,CAA3B;AACAC,WAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCP,kBAAlC;;AAEA,KAAC,YAAY;AACX,YAAMQ,gBAAe,GAAI,EAAzB;AACA,UAAIC,SAAQ,GAAI,CAAhB;AAEAC,cAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCC,OAAnC,CAA4CC,WAAD,IAAiB;AAC1D,cAAMC,KAAI,GAAID,WAAW,CAACE,SAAZ,CACXC,OADW,GAEXjB,KAFW,CAEL,IAFK,EAGXkB,GAHW,CAGNC,IAAD,IAAUA,IAAI,CAACF,OAAL,GAAeG,UAAf,CAA0B,IAA1B,EAAgC,EAAhC,CAHH,CAAd;AAIAb,eAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBO,KAArB;AACAD,mBAAW,CAACO,SAAZ,GAAwB,EAAxB;AAEAN,aAAK,CAACF,OAAN,CAAeM,IAAD,IAAU;AACtB,gBAAMG,IAAG,GAAIX,QAAQ,CAACY,aAAT,CAAuB,MAAvB,CAAb;AACAD,cAAI,CAACE,OAAL,CAAaC,MAAb,GAAsB,MAAtB;AACAH,cAAI,CAACE,OAAL,CAAaE,YAAb,GAA4BP,IAA5B,CAHsB,CAGY;;AAClCL,qBAAW,CAACa,WAAZ,CAAwBL,IAAxB;AAEA,cAAIM,oBAAJ,CACGC,OAAD,IAAa;AACX,gBAAIA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,KAA8B,IAAlC,EAAwC;AACtCR,kBAAI,CAACE,OAAL,CAAaC,MAAb,GAAsB,OAAtB;AACF;AACD,WALH,EAME;AAAEM,qBAAS,EAAE,CAAC,CAAD;AAAb,WANF,EAOEC,OAPF,CAOUV,IAPV;AASA,gBAAMW,QAAO,GAAI,IAAIrC,QAAJ,CAAa0B,IAAb,EAAmBrB,kBAAnB,CAAjB;AACAgC,kBAAQ,CAACC,mBAAT,CAA6Bf,IAA7B;AACAc,kBAAQ,CAACE,gBAAT;AAEAF,kBAAQ,CAACG,MAAT;AAEAd,cAAI,CAACe,gBAAL,CAAsB,YAAtB,EAAoC,MAAM;AACxCJ,oBAAQ,CAACE,gBAAT;AACD,WAFD;AAIA1B,0BAAgB,CAAC6B,IAAjB,CAAsBL,QAAtB;AACD,SA1BD;AA2BD,OAnCD;AAqCA,UAAIM,UAAS,GAAI,CAAjB;AACAC,2BAAqB,CAAC,SAASC,OAAT,GAAmB;AACvCD,6BAAqB,CAACC,OAAD,CAArB;;AACA,YAAIF,UAAU,KAAK,CAAf,KAAqB,CAAzB,EAA4B;AAC1B,eAAK,MAAMN,QAAX,IAAuBxB,gBAAvB,EAAyC;AACvCwB,oBAAQ,CAACS,IAAT;AACAT,oBAAQ,CAACG,MAAT;AACF;AACF;AACD,OARoB,CAArB,CA1CW,CAoDX;AACA;AACA;AACD,KAvDD;AAwDD;;AApEY,CAAf","names":["FlapText","name","mounted","characters","split","shuffledCharacters","sort","a","b","Math","random","console","log","flapTextElements","textIndex","document","querySelectorAll","forEach","flapElement","lines","innerText","trimEnd","map","line","replaceAll","innerHTML","span","createElement","dataset","paused","originalText","appendChild","IntersectionObserver","entries","isIntersecting","threshold","observe","flapText","setInitialPositions","shufflePositions","render","addEventListener","push","frameCount","requestAnimationFrame","animate","flap"],"sourceRoot":"","sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/components/FlapText.vue"],"sourcesContent":["<template>\n  <!-- Vous pouvez ajouter le HTML associé ici si nécessaire -->\n  <div class=\"flap\">\n    <!-- Contenu de votre composant FlapText -->\n    Phrase test pour flap text\n  </div>\n</template>\n\n<script>\nimport FlapText from \"../helpers/FlapText\";\n\nexport default {\n  name: \"FlapText\",\n  mounted() {\n    const characters =\n      \"\\\"'“”‘’¹²³!#$&%()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~½¼¡«»×▓▒░│┤▀└┴┬├─┼┐┌└┘\".split(\n        \"\"\n      );\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const shuffledCharacters = characters.sort((a, b) => 0.5 - Math.random());\n    console.log(\"shuffledCharacters\", shuffledCharacters);\n\n    (function () {\n      const flapTextElements = [];\n      let textIndex = 0;\n\n      document.querySelectorAll(\".flap\").forEach((flapElement) => {\n        const lines = flapElement.innerText\n          .trimEnd()\n          .split(\"\\n\")\n          .map((line) => line.trimEnd().replaceAll(\"\\t\", \"\"));\n        console.log(\"LINEs\", lines);\n        flapElement.innerHTML = \"\";\n\n        lines.forEach((line) => {\n          const span = document.createElement(\"span\");\n          span.dataset.paused = \"true\";\n          span.dataset.originalText = line; // Stockez le texte original dans un attribut personnalisé\n          flapElement.appendChild(span);\n\n          new IntersectionObserver(\n            (entries) => {\n              if (entries[0].isIntersecting === true) {\n                span.dataset.paused = \"false\";\n              }\n            },\n            { threshold: [0] }\n          ).observe(span);\n\n          const flapText = new FlapText(span, shuffledCharacters);\n          flapText.setInitialPositions(line);\n          flapText.shufflePositions();\n\n          flapText.render();\n\n          span.addEventListener(\"mouseenter\", () => {\n            flapText.shufflePositions();\n          });\n\n          flapTextElements.push(flapText);\n        });\n      });\n\n      let frameCount = 0;\n      requestAnimationFrame(function animate() {\n        requestAnimationFrame(animate);\n        if (frameCount++ % 2 === 0) {\n          for (const flapText of flapTextElements) {\n            flapText.flap();\n            flapText.render();\n          }\n        }\n      });\n\n      //   document.querySelectorAll(\".flap\").forEach((flapElement) => {\n      //     flapElement.classList.remove(\"hidden\");\n      //   });\n    })();\n  },\n};\n</script>\n\n<style scoped>\n/* Styles spécifiques au composant ici, ou utilisez des classes externes */\n</style>\n"]},"metadata":{},"sourceType":"module"}