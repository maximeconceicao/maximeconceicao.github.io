{"ast":null,"code":"import { onMounted, onUpdated } from \"vue\";\nimport SweetGameCell from \"@/components/SweetGameCell.vue\";\nexport default {\n  name: \"SweetGameCells\",\n  components: {\n    SweetGameCell\n  },\n  props: [\"sequenceToFind\"],\n\n  setup(props) {\n    let playerSequence = Aref(null);\n\n    function resetPlayerSequence() {\n      playerSequence.value = Array.apply(null, Array(props.sequenceToFind.length)).map(() => {\n        return {};\n      });\n    }\n\n    onMounted(() => {\n      console.log(\"GAME CELLS : \", playerSequence, props.sequenceToFind.length);\n\n      for (const cell in playerSequence) {\n        console.log(\"hello\");\n      }\n    });\n    onUpdated(() => {\n      console.log(\"GAME CELLS : \", playerSequence, props.sequenceToFind.length);\n      playerSequence = Array.apply(null, Array(props.sequenceToFind.length)).map(() => 0);\n\n      for (const cell in playerSequence) {\n        console.log(\"hello\");\n      }\n    });\n    return {\n      playerSequence\n    };\n  }\n\n};","map":{"version":3,"mappings":"AASA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,KAArC;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AAEA,eAAe;AACbC,MAAI,EAAE,gBADO;AAEbC,YAAU,EAAE;AAAEF;AAAF,GAFC;AAGbG,OAAK,EAAE,CAAC,gBAAD,CAHM;;AAIbC,OAAK,CAACD,KAAD,EAAQ;AACX,QAAIE,cAAa,GAAIC,IAAI,CAAC,IAAD,CAAzB;;AAEA,aAASC,mBAAT,GAA+B;AAC7BF,oBAAc,CAACG,KAAf,GAAuBC,KAAK,CAACC,KAAN,CACrB,IADqB,EAErBD,KAAK,CAACN,KAAK,CAACQ,cAAN,CAAqBC,MAAtB,CAFgB,EAGrBC,GAHqB,CAGjB,MAAM;AACV,eAAO,EAAP;AACD,OALsB,CAAvB;AAMF;;AAEAf,aAAS,CAAC,MAAM;AACdgB,aAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BV,cAA7B,EAA6CF,KAAK,CAACQ,cAAN,CAAqBC,MAAlE;;AACA,WAAK,MAAMI,IAAX,IAAmBX,cAAnB,EAAmC;AACjCS,eAAO,CAACC,GAAR,CAAY,OAAZ;AACF;AACD,KALQ,CAAT;AAOAhB,aAAS,CAAC,MAAM;AACde,aAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BV,cAA7B,EAA6CF,KAAK,CAACQ,cAAN,CAAqBC,MAAlE;AACAP,oBAAa,GAAII,KAAK,CAACC,KAAN,CACf,IADe,EAEfD,KAAK,CAACN,KAAK,CAACQ,cAAN,CAAqBC,MAAtB,CAFU,EAGfC,GAHe,CAGX,MAAM,CAHK,CAAjB;;AAKA,WAAK,MAAMG,IAAX,IAAmBX,cAAnB,EAAmC;AACjCS,eAAO,CAACC,GAAR,CAAY,OAAZ;AACF;AACD,KAVQ,CAAT;AAYA,WAAO;AAAEV;AAAF,KAAP;AACD;;AApCY,CAAf","names":["onMounted","onUpdated","SweetGameCell","name","components","props","setup","playerSequence","Aref","resetPlayerSequence","value","Array","apply","sequenceToFind","length","map","console","log","cell"],"sourceRoot":"","sources":["/home/maxime/personal_repos/sweet-portfolio/src/components/SweetGameCells.vue"],"sourcesContent":["<template>\n  <sweet-game-cell\n    v-for=\"(shape, index) in playerSequence\"\n    :key=\"index\"\n    :shape=\"shape\"\n  />\n</template>\n\n<script>\nimport { onMounted, onUpdated } from \"vue\";\nimport SweetGameCell from \"@/components/SweetGameCell.vue\";\n\nexport default {\n  name: \"SweetGameCells\",\n  components: { SweetGameCell },\n  props: [\"sequenceToFind\"],\n  setup(props) {\n    let playerSequence = Aref(null);\n\n    function resetPlayerSequence() {\n      playerSequence.value = Array.apply(\n        null,\n        Array(props.sequenceToFind.length)\n      ).map(() => {\n        return {};\n      });\n    }\n\n    onMounted(() => {\n      console.log(\"GAME CELLS : \", playerSequence, props.sequenceToFind.length);\n      for (const cell in playerSequence) {\n        console.log(\"hello\");\n      }\n    });\n\n    onUpdated(() => {\n      console.log(\"GAME CELLS : \", playerSequence, props.sequenceToFind.length);\n      playerSequence = Array.apply(\n        null,\n        Array(props.sequenceToFind.length)\n      ).map(() => 0);\n\n      for (const cell in playerSequence) {\n        console.log(\"hello\");\n      }\n    });\n\n    return { playerSequence };\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}