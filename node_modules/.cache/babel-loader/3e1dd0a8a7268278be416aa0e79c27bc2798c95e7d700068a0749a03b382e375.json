{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"orb-sketch\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"blur\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"noise\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Canvas \"), _hoisted_1, _hoisted_2, _hoisted_3], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","id","class","_createCommentVNode","_hoisted_1","_hoisted_2","_hoisted_3"],"sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/components/SweetBackground.vue"],"sourcesContent":["<template>\n  <!-- Canvas -->\n\n  <div id=\"orb-sketch\"></div>\n  <div class=\"blur\"></div>\n  <div class=\"noise\"></div>\n</template>\n\n<script>\nimport p5 from \"p5\";\nimport Orb from \"../helpers/Orb\";\nimport { onMounted } from \"@vue/runtime-core\";\n\nexport default {\n  name: \"SweetBackground\",\n  setup() {\n    onMounted(() => {\n      const sketch = (s) => {\n        let w = window.innerWidth;\n        let h = window.innerHeight;\n\n        //test\n        let cols = 50;\n        let rows = 50;\n        let cellWidth = w / cols;\n        let cellHeight = h / rows;\n        //test\n\n        let orbs = [];\n\n        s.setup = () => {\n          s.createCanvas(w, h);\n          //s.noStroke();\n\n          //orbs = initOrbs();\n        };\n\n        s.draw = () => {\n          //s.background(0);\n          // for (const orb of orbs) {\n          //   orb.move(s);\n          //   orb.render(s);\n          // }\n          //test\n           for (let x = 0; x < w; x += cellWidth) {\n            for (let y = 0; y < h; y += cellHeight) {\n\n            }\n          }\n          for (let x = 0; x < w; x += cellWidth) {\n            for (let y = 0; y < h; y += cellHeight) {\n              for(const orb of orbs){\n                if(ord.x)\n              }\n              s.stroke(200, 0, 200);\n              s.rect(x, y, cellWidth, cellHeight);\n            }\n          }\n          //test\n        };\n\n        function initOrbs() {\n          const orbsArray = [];\n          let xPosInWidthPct = 0.7;\n          let yPosInHeightPct = 0.7;\n          let maxDistPct = 0.3;\n\n          for (let i = 0; i < 10; i++) {\n            const orb = new Orb(\n              xPosInWidthPct,\n              yPosInHeightPct,\n              maxDistPct,\n              s.color(\"#ff000040\")\n            );\n            orbsArray.push(orb);\n          }\n\n          xPosInWidthPct = 0.3;\n          yPosInHeightPct = 0.3;\n\n          for (let i = 0; i < 10; i++) {\n            const orb = new Orb(\n              xPosInWidthPct,\n              yPosInHeightPct,\n              maxDistPct,\n              s.color(\"#0000ff40\")\n            );\n            orbsArray.push(orb);\n          }\n          console.log(\"orbsArray\", orbsArray);\n          return orbsArray;\n        }\n\n        window.onresize = function () {\n          // assigns new values for width and height variables\n          w = window.innerWidth;\n          h = window.innerHeight;\n          cellWidth = w / cols;\n          cellHeight = h / rows;\n          s.resizeCanvas(w, h);\n          initOrbs();\n        };\n      };\n\n      new p5(sketch, \"orb-sketch\");\n    });\n  },\n};\n</script>\n\n<style>\n@supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {\n  #orb-sketch {\n    position: fixed;\n  }\n  .blur {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n    background: rgba(170, 196, 200, 0.1);\n    backdrop-filter: saturate(180%) blur(3rem);\n  }\n  .noise {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n    background-image: url(\"../assets/noise.png\");\n    background-size: auto;\n    background-repeat: repeat;\n    mix-blend-mode: overlay;\n    opacity: 0.2;\n  }\n}\n</style>\n"],"mappings":";gCAGEA,mBAAA,CAA2B;EAAtBC,EAAE,EAAC;AAAY;gCACpBD,mBAAA,CAAwB;EAAnBE,KAAK,EAAC;AAAM;gCACjBF,mBAAA,CAAyB;EAApBE,KAAK,EAAC;AAAO;;;6DAJlBC,mBAAA,YAAe,EAEfC,UAA2B,EAC3BC,UAAwB,EACxBC,UAAyB,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}