{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"game-timer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"p\", null, _toDisplayString($setup.secondsLeft), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$setup","secondsLeft"],"sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/components/SweetGame/SweetGameTimer.vue"],"sourcesContent":["<template>\n  <div class=\"game-timer\">\n    <p>{{ secondsLeft }}</p>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\n\nexport default {\n  name: \"SweetGameTimer\",\n  props: [\"startSeconds\"],\n  setup(props) {\n    console.log(\"START SECONDS\", props.startSeconds);\n    const secondsLeft = ref(props.startSeconds);\n\n    let countDownDate = new Date().getTime() + props.startSeconds * 1000;\n\n    // Update the count down every 1 second\n    var x = setInterval(function () {\n      // Get today's date and time\n      var now = new Date().getTime();\n\n      // Find the distance between now and the count down date\n      var distance = countDownDate - now;\n\n      if (distance <= 0) {\n        clearInterval(x);\n        secondsLeft.value = 0;\n      } else {\n        secondsLeft.value = Math.floor(distance / 1000);\n      }\n      console.log(\"DISTANCE\", distance);\n\n      // If the count down is finished, write some text\n    }, 1000);\n\n    return { secondsLeft };\n  },\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAY;;uBAAvBC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAwB,WAAAC,gBAAA,CAAlBC,MAAA,CAAAC,WAAW,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}