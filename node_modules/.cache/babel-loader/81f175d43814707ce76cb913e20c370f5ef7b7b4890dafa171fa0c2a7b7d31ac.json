{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, onMounted } from \"vue\";\nimport SweetGameSequence from \"@/components/SweetGame/SweetGameSequence.vue\";\nimport SweetGameCells from \"@/components/SweetGame/SweetGameCells.vue\";\nimport SweetGameButtons from \"@/components/SweetGame/SweetGameButtons.vue\";\nimport SweetGameTimer from \"@/components/SweetGame/SweetGameTimer.vue\";\nimport { SHAPES, START_SEQUENCE_LENGTH } from \"@/helpers/game.constants\";\nimport { random } from \"@/helpers/utils\";\nimport SweetGameScoreBoard from \"@/components/SweetGame/SweetGameScoreBoard.vue\";\nexport default defineComponent({\n  name: \"GameView\",\n  components: {\n    SweetGameSequence,\n    SweetGameCells,\n    SweetGameButtons,\n    SweetGameTimer,\n    SweetGameScoreBoard\n  },\n  data() {\n    return {\n      initialCountdown: 1,\n      isGameOver: false\n    };\n  },\n  setup() {\n    let sequenceLength = START_SEQUENCE_LENGTH;\n    let sequenceToFind = ref([]);\n    let playerSequence = ref([]);\n    let score = ref(0);\n    function resetGame() {\n      sequenceLength = START_SEQUENCE_LENGTH;\n      resetSequences();\n    }\n    function resetSequences() {\n      sequenceToFind.value = generateStartingSequence(sequenceLength);\n      playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n    }\n    function generateStartingSequence(sequenceLength) {\n      const generatedSequence = [];\n      for (let i = 0; i < sequenceLength; i++) {\n        let indexOfShape = Math.floor(random(0, Object.keys(SHAPES).length));\n        generatedSequence.push(Object.values(SHAPES)[indexOfShape]);\n      }\n      return generatedSequence;\n    }\n    function resetPlayerSequence(sequenceLength) {\n      return Array.apply(null, Array(sequenceLength)).map(() => {\n        return null;\n      });\n    }\n    function onDrawShape(shape) {\n      const index = playerSequence.value.findIndex(shape => shape === null);\n      if (index > -1) {\n        playerSequence.value[index] = shape;\n      } else {\n        playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n      }\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n    function onClear() {\n      playerSequence.value = resetPlayerSequence(sequenceLength);\n    }\n    function validateSequence() {\n      if (JSON.stringify(playerSequence.value) === JSON.stringify(sequenceToFind.value)) {\n        score.value += 1;\n        sequenceLength += 1;\n        resetSequences();\n      }\n    }\n    function onReverse() {\n      let playerSequenceCopy = [...playerSequence.value];\n      playerSequenceCopy.forEach((shape, index) => {\n        switch (shape) {\n          case SHAPES.STAR:\n            playerSequence.value[index] = SHAPES.TRIANGLE;\n            break;\n          case SHAPES.SQUARE:\n            playerSequence.value[index] = SHAPES.CIRCLE;\n            break;\n          case SHAPES.TRIANGLE:\n            playerSequence.value[index] = SHAPES.STAR;\n            break;\n          case SHAPES.CIRCLE:\n            playerSequence.value[index] = SHAPES.SQUARE;\n            break;\n        }\n      });\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n    onMounted(() => {\n      resetGame();\n    });\n    return {\n      sequenceToFind,\n      playerSequence,\n      score,\n      onDrawShape,\n      onReverse,\n      onClear,\n      resetGame\n    };\n  },\n  methods: {\n    redirectToHome() {\n      this.$router.push(\"/\");\n    },\n    handleTimerFinished() {\n      this.isGameOver = true;\n    },\n    restart() {\n      this.onClear();\n      this.score = 0;\n      this.resetGame();\n      this.$refs.timer.resetTimer();\n      this.isGameOver = false;\n    }\n  }\n});","map":{"version":3,"names":["defineComponent","ref","onMounted","SweetGameSequence","SweetGameCells","SweetGameButtons","SweetGameTimer","SHAPES","START_SEQUENCE_LENGTH","random","SweetGameScoreBoard","name","components","data","initialCountdown","isGameOver","setup","sequenceLength","sequenceToFind","playerSequence","score","resetGame","resetSequences","value","generateStartingSequence","resetPlayerSequence","length","generatedSequence","i","indexOfShape","Math","floor","Object","keys","push","values","Array","apply","map","onDrawShape","shape","index","findIndex","at","validateSequence","onClear","JSON","stringify","onReverse","playerSequenceCopy","forEach","STAR","TRIANGLE","SQUARE","CIRCLE","methods","redirectToHome","$router","handleTimerFinished","restart","$refs","timer","resetTimer"],"sources":["/Users/maximeconceicao/personal_repos/sweet-portfolio/src/views/GameView.vue"],"sourcesContent":["<template>\n  <div class=\"game\">\n    <div class=\"sticky-header game__back\">\n      <header>\n        <router-link :to=\"{ name: 'home' }\"\n          ><span class=\"material-icons\">arrow_back</span></router-link\n        >\n      </header>\n    </div>\n    <div id=\"main-game\">\n      <div class=\"game__header\">\n        <div class=\"game__header__item\">\n          <p>Score</p>\n          <p class=\"game-score\">{{ score }}</p>\n        </div>\n        <div class=\"game__header__item\">\n          <p>Time</p>\n          <sweet-game-timer\n            ref=\"timer\"\n            :initialCountdown=\"initialCountdown\"\n            @timerFinished=\"handleTimerFinished\"\n          />\n        </div>\n      </div>\n      <div v-if=\"!isGameOver\" class=\"game__board\">\n        <sweet-game-sequence :sequenceToFind=\"sequenceToFind\" />\n        <sweet-game-cells\n          v-if=\"playerSequence?.length\"\n          :playerSequence=\"playerSequence\"\n        />\n        <sweet-game-buttons\n          @drawShape=\"onDrawShape\"\n          @reverse=\"onReverse\"\n          @clear=\"onClear\"\n        />\n      </div>\n      <div v-else>\n        <sweet-game-score-board @restart=\"restart\" @redirect=\"redirectToHome\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref, onMounted } from \"vue\";\nimport SweetGameSequence from \"@/components/SweetGame/SweetGameSequence.vue\";\nimport SweetGameCells from \"@/components/SweetGame/SweetGameCells.vue\";\nimport SweetGameButtons from \"@/components/SweetGame/SweetGameButtons.vue\";\nimport SweetGameTimer from \"@/components/SweetGame/SweetGameTimer.vue\";\n\nimport { SHAPES, START_SEQUENCE_LENGTH } from \"@/helpers/game.constants\";\nimport { random } from \"@/helpers/utils\";\nimport SweetGameScoreBoard from \"@/components/SweetGame/SweetGameScoreBoard.vue\";\n\nexport default defineComponent({\n  name: \"GameView\",\n  components: {\n    SweetGameSequence,\n    SweetGameCells,\n    SweetGameButtons,\n    SweetGameTimer,\n    SweetGameScoreBoard,\n  },\n  data() {\n    return {\n      initialCountdown: 1,\n      isGameOver: false,\n    };\n  },\n  setup() {\n    let sequenceLength = START_SEQUENCE_LENGTH;\n    let sequenceToFind = ref([]);\n    let playerSequence = ref([]);\n    let score = ref(0);\n\n    function resetGame() {\n      sequenceLength = START_SEQUENCE_LENGTH;\n      resetSequences();\n    }\n\n    function resetSequences() {\n      sequenceToFind.value = generateStartingSequence(sequenceLength);\n      playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n    }\n\n    function generateStartingSequence(sequenceLength) {\n      const generatedSequence = [];\n      for (let i = 0; i < sequenceLength; i++) {\n        let indexOfShape = Math.floor(random(0, Object.keys(SHAPES).length));\n        generatedSequence.push(Object.values(SHAPES)[indexOfShape]);\n      }\n      return generatedSequence;\n    }\n\n    function resetPlayerSequence(sequenceLength) {\n      return Array.apply(null, Array(sequenceLength)).map(() => {\n        return null;\n      });\n    }\n\n    function onDrawShape(shape) {\n      const index = playerSequence.value.findIndex((shape) => shape === null);\n\n      if (index > -1) {\n        playerSequence.value[index] = shape;\n      } else {\n        playerSequence.value = resetPlayerSequence(sequenceToFind.value.length);\n      }\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    function onClear() {\n      playerSequence.value = resetPlayerSequence(sequenceLength);\n    }\n\n    function validateSequence() {\n      if (\n        JSON.stringify(playerSequence.value) ===\n        JSON.stringify(sequenceToFind.value)\n      ) {\n        score.value += 1;\n        sequenceLength += 1;\n        resetSequences();\n      }\n    }\n\n    function onReverse() {\n      let playerSequenceCopy = [...playerSequence.value];\n      playerSequenceCopy.forEach((shape, index) => {\n        switch (shape) {\n          case SHAPES.STAR:\n            playerSequence.value[index] = SHAPES.TRIANGLE;\n            break;\n          case SHAPES.SQUARE:\n            playerSequence.value[index] = SHAPES.CIRCLE;\n            break;\n          case SHAPES.TRIANGLE:\n            playerSequence.value[index] = SHAPES.STAR;\n            break;\n          case SHAPES.CIRCLE:\n            playerSequence.value[index] = SHAPES.SQUARE;\n            break;\n        }\n      });\n\n      if (playerSequence.value.at(-1)) {\n        validateSequence();\n      }\n    }\n\n    onMounted(() => {\n      resetGame();\n    });\n    return {\n      sequenceToFind,\n      playerSequence,\n      score,\n      onDrawShape,\n      onReverse,\n      onClear,\n      resetGame,\n    };\n  },\n  methods: {\n    redirectToHome() {\n      this.$router.push(\"/\");\n    },\n    handleTimerFinished() {\n      this.isGameOver = true;\n    },\n    restart() {\n      this.onClear();\n      this.score = 0;\n      this.resetGame();\n      this.$refs.timer.resetTimer();\n      this.isGameOver = false;\n    },\n  },\n});\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}